{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Introduction: Business Problem"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vancouver City, the most populous city in the Canada is one of the greatest metropolises over the world. It is necessary to adopt machine learning tools in order to assist homebuyers clientele in Vancouver to make wise and effective decisions. As a result, the business problem we are currently posing is: how could we provide support to homebuyers clientele in to purchase a suitable real estate in Vancouver in this uncertain economic and financial scenario?  \n",
    "\n",
    "To solve this business problem, we are going to cluster Vancouver neighborhoods in order to recommend venues and the current average price of real estate where homebuyers can make a real estate investment. We will recommend profitable venues according to amenities and essential facilities surrounding such venues i.e. elementary schools, high schools, hospitals & grocery stores.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import necessary package"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting opencage\n",
      "  Downloading https://files.pythonhosted.org/packages/00/6b/05922eb2ea69713f3c9e355649d8c905a7a0880e9511b7b10d6dedeb859e/opencage-1.2.1-py3-none-any.whl\n",
      "Requirement already satisfied: pyopenssl>=0.15.1 in /Users/chengqi_xu/opt/anaconda3/lib/python3.7/site-packages (from opencage) (19.0.0)\n",
      "Collecting backoff>=1.10.0 (from opencage)\n",
      "  Downloading https://files.pythonhosted.org/packages/f0/32/c5dd4f4b0746e9ec05ace2a5045c1fc375ae67ee94355344ad6c7005fd87/backoff-1.10.0-py2.py3-none-any.whl\n",
      "Requirement already satisfied: six>=1.4.0 in /Users/chengqi_xu/opt/anaconda3/lib/python3.7/site-packages (from opencage) (1.12.0)\n",
      "Requirement already satisfied: Requests>=2.2.0 in /Users/chengqi_xu/opt/anaconda3/lib/python3.7/site-packages (from opencage) (2.22.0)\n",
      "Requirement already satisfied: cryptography>=2.3 in /Users/chengqi_xu/opt/anaconda3/lib/python3.7/site-packages (from pyopenssl>=0.15.1->opencage) (2.7)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/chengqi_xu/opt/anaconda3/lib/python3.7/site-packages (from Requests>=2.2.0->opencage) (2019.9.11)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /Users/chengqi_xu/opt/anaconda3/lib/python3.7/site-packages (from Requests>=2.2.0->opencage) (1.24.2)\n",
      "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /Users/chengqi_xu/opt/anaconda3/lib/python3.7/site-packages (from Requests>=2.2.0->opencage) (3.0.4)\n",
      "Requirement already satisfied: idna<2.9,>=2.5 in /Users/chengqi_xu/opt/anaconda3/lib/python3.7/site-packages (from Requests>=2.2.0->opencage) (2.8)\n",
      "Requirement already satisfied: cffi!=1.11.3,>=1.8 in /Users/chengqi_xu/opt/anaconda3/lib/python3.7/site-packages (from cryptography>=2.3->pyopenssl>=0.15.1->opencage) (1.12.3)\n",
      "Requirement already satisfied: asn1crypto>=0.21.0 in /Users/chengqi_xu/opt/anaconda3/lib/python3.7/site-packages (from cryptography>=2.3->pyopenssl>=0.15.1->opencage) (1.0.1)\n",
      "Requirement already satisfied: pycparser in /Users/chengqi_xu/opt/anaconda3/lib/python3.7/site-packages (from cffi!=1.11.3,>=1.8->cryptography>=2.3->pyopenssl>=0.15.1->opencage) (2.19)\n",
      "Installing collected packages: backoff, opencage\n",
      "Successfully installed backoff-1.10.0 opencage-1.2.1\n",
      "Matplotlib version:  3.1.1\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "#Command to install OpenCage Geocoder for fetching Lat and Lng of Neighborhood\n",
    "!pip install opencage\n",
    "\n",
    "#Importing OpenCage Geocoder\n",
    "from opencage.geocoder import OpenCageGeocode\n",
    "\n",
    "# use the inline backend to generate the plots within the browser\n",
    "%matplotlib inline \n",
    "\n",
    "#Importing Matplot lib and associated packages to perform Data Visualisation and Exploratory Data Analysis\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "mpl.style.use('ggplot') # optional: for ggplot-like style\n",
    "\n",
    "# check for latest version of Matplotlib\n",
    "print ('Matplotlib version: ', mpl.__version__) # >= 2.0.0\n",
    "\n",
    "# Matplotlib and associated plotting modules\n",
    "import matplotlib.cm as cm\n",
    "import matplotlib.colors as colors\n",
    "\n",
    "#Importing folium to visualise Maps and plot based on Lat and Lng\n",
    "import folium\n",
    "\n",
    "#Requests to request web pages by making get requests to FourSquare REST Client\n",
    "import requests\n",
    "\n",
    "#To normalise data returned by FourSquare API\n",
    "from pandas.io.json import json_normalize\n",
    "\n",
    "#Importing KMeans from SciKit library to Classify neighborhoods into clusters\n",
    "from sklearn.cluster import KMeans"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read from dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TYPE</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>MONTH</th>\n",
       "      <th>DAY</th>\n",
       "      <th>HOUR</th>\n",
       "      <th>NEIGHBOURHOOD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>West End</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>6</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>West End</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>West End</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>Central Business District</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>Central Business District</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         TYPE  YEAR  MONTH  DAY  HOUR  \\\n",
       "0  Break and Enter Commercial  2018      3    2     6   \n",
       "1  Break and Enter Commercial  2018      6   16    18   \n",
       "2  Break and Enter Commercial  2018     12   12     0   \n",
       "3  Break and Enter Commercial  2018      4    9     6   \n",
       "4  Break and Enter Commercial  2018     10    2    18   \n",
       "\n",
       "               NEIGHBOURHOOD  \n",
       "0                   West End  \n",
       "1                   West End  \n",
       "2                   West End  \n",
       "3  Central Business District  \n",
       "4  Central Business District  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_crime_df = pd.read_csv('https://raw.githubusercontent.com/RamanujaSVL/Coursera_Capstone/master/vancouver_crime_records_2018.csv', index_col=None)\n",
    "\n",
    "#Dropping X,Y which represents Lat, Lng data as Coordinates, the data seems to be corrupt\n",
    "vnc_crime_df.drop(['Unnamed: 0','MINUTE', 'HUNDRED_BLOCK', 'X', 'Y'], axis = 1, inplace = True)\n",
    "\n",
    "#vnc_crime_df.columns\n",
    "\n",
    "vnc_crime_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Type</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Neighbourhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>West End</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>6</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>West End</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>West End</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>Central Business District</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>Central Business District</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Type  Year  Month  Day  Hour  \\\n",
       "0  Break and Enter Commercial  2018      3    2     6   \n",
       "1  Break and Enter Commercial  2018      6   16    18   \n",
       "2  Break and Enter Commercial  2018     12   12     0   \n",
       "3  Break and Enter Commercial  2018      4    9     6   \n",
       "4  Break and Enter Commercial  2018     10    2    18   \n",
       "\n",
       "               Neighbourhood  \n",
       "0                   West End  \n",
       "1                   West End  \n",
       "2                   West End  \n",
       "3  Central Business District  \n",
       "4  Central Business District  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_crime_df.columns = ['Type', 'Year','Month','Day','Hour','Neighbourhood']\n",
    "vnc_crime_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Central Business District    10857\n",
       "West End                      3031\n",
       "Mount Pleasant                2396\n",
       "Strathcona                    1987\n",
       "Kitsilano                     1802\n",
       "Fairview                      1795\n",
       "Renfrew-Collingwood           1762\n",
       "Grandview-Woodland            1761\n",
       "Kensington-Cedar Cottage      1391\n",
       "Hastings-Sunrise              1270\n",
       "Sunset                         967\n",
       "Riley Park                     866\n",
       "Marpole                        828\n",
       "Victoria-Fraserview            600\n",
       "Killarney                      565\n",
       "Oakridge                       499\n",
       "Dunbar-Southlands              474\n",
       "Kerrisdale                     417\n",
       "Shaughnessy                    414\n",
       "West Point Grey                372\n",
       "Arbutus Ridge                  311\n",
       "South Cambie                   292\n",
       "Stanley Park                   154\n",
       "Musqueam                        17\n",
       "Name: Neighbourhood, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Total crimes in different neighborhoods\n",
    "vnc_crime_df['Neighbourhood'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Gather additional info from Wikipedia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Neighbourhood Count 24 Borough Count 4\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Borough</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>West End</td>\n",
       "      <td>Central</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Central Business District</td>\n",
       "      <td>Central</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Hastings-Sunrise</td>\n",
       "      <td>East Side</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Grandview-Woodland</td>\n",
       "      <td>East Side</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Mount Pleasant</td>\n",
       "      <td>East Side</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Neighbourhood    Borough\n",
       "0                   West End    Central\n",
       "1  Central Business District    Central\n",
       "2           Hastings-Sunrise  East Side\n",
       "3         Grandview-Woodland  East Side\n",
       "4             Mount Pleasant  East Side"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# define the dataframe columns\n",
    "column_names = ['Neighbourhood', 'Borough'] \n",
    "\n",
    "# instantiate the dataframe\n",
    "vnc_neigh_bor = pd.DataFrame(columns=column_names)\n",
    "\n",
    "vnc_neigh_bor['Neighbourhood'] = vnc_crime_df['Neighbourhood'].unique()\n",
    "\n",
    "neigh_bor_dict = {'Central Business District':'Central', 'West End':'Central', 'Stanley Park':'Central', 'Victoria-Fraserview':'South Vancouver',\n",
    "                  'Killarney':'South Vancouver', 'Musqueam':'South Vancouver', 'Mount Pleasant':'East Side', 'Strathcona':'East Side',\n",
    "                  'Renfrew-Collingwood':'East Side', 'Grandview-Woodland':'East Side', 'Kensington-Cedar Cottage':'East Side', 'Hastings-Sunrise':'East Side',\n",
    "                  'Sunset':'East Side', 'Riley Park':'East Side', 'Kitsilano':'West Side', 'Fairview':'West Side',\n",
    "                  'Marpole':'West Side', 'Oakridge':'West Side', 'Dunbar-Southlands':'West Side', 'Kerrisdale':'West Side',\n",
    "                  'Shaughnessy':'West Side', 'West Point Grey':'West Side', 'Arbutus Ridge':'West Side', 'South Cambie':'West Side'}\n",
    "\n",
    "for row, neigh in zip(neigh_bor_dict, vnc_neigh_bor['Neighbourhood']):\n",
    "  vnc_neigh_bor.loc[vnc_neigh_bor.Neighbourhood == row, 'Borough'] = neigh_bor_dict.get(row)\n",
    "\n",
    "vnc_neigh_bor.dropna(inplace=True)\n",
    "\n",
    "print(\"Total Neighbourhood Count\",len(vnc_neigh_bor['Neighbourhood']),\"Borough Count\",len(vnc_neigh_bor['Borough'].unique()))\n",
    "\n",
    "vnc_neigh_bor.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Type</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Borough</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>West End</td>\n",
       "      <td>Central</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>6</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>West End</td>\n",
       "      <td>Central</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>West End</td>\n",
       "      <td>Central</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>West End</td>\n",
       "      <td>Central</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Break and Enter Commercial</td>\n",
       "      <td>2018</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>11</td>\n",
       "      <td>West End</td>\n",
       "      <td>Central</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Type  Year  Month  Day  Hour Neighbourhood  Borough\n",
       "0  Break and Enter Commercial  2018      3    2     6      West End  Central\n",
       "1  Break and Enter Commercial  2018      6   16    18      West End  Central\n",
       "2  Break and Enter Commercial  2018     12   12     0      West End  Central\n",
       "3  Break and Enter Commercial  2018      3    2     3      West End  Central\n",
       "4  Break and Enter Commercial  2018      3   17    11      West End  Central"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merge crime data \n",
    "vnc_boroughs_crime = pd.merge(vnc_crime_df,vnc_neigh_bor, on='Neighbourhood')\n",
    "\n",
    "vnc_boroughs_crime.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Central            14042\n",
       "East Side          12400\n",
       "West Side           7204\n",
       "South Vancouver     1182\n",
       "Name: Borough, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_boroughs_crime.dropna(inplace=True)\n",
    "vnc_boroughs_crime['Borough'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Explore data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"10\" halign=\"left\">Year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Type</th>\n",
       "      <th>Break and Enter Commercial</th>\n",
       "      <th>Break and Enter Residential/Other</th>\n",
       "      <th>Mischief</th>\n",
       "      <th>Other Theft</th>\n",
       "      <th>Theft from Vehicle</th>\n",
       "      <th>Theft of Bicycle</th>\n",
       "      <th>Theft of Vehicle</th>\n",
       "      <th>Vehicle Collision or Pedestrian Struck (with Fatality)</th>\n",
       "      <th>Vehicle Collision or Pedestrian Struck (with Injury)</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Borough</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Central</td>\n",
       "      <td>787</td>\n",
       "      <td>198</td>\n",
       "      <td>2280</td>\n",
       "      <td>2489</td>\n",
       "      <td>6871</td>\n",
       "      <td>857</td>\n",
       "      <td>245</td>\n",
       "      <td>1</td>\n",
       "      <td>314</td>\n",
       "      <td>14042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>East Side</td>\n",
       "      <td>786</td>\n",
       "      <td>1043</td>\n",
       "      <td>2192</td>\n",
       "      <td>1674</td>\n",
       "      <td>4754</td>\n",
       "      <td>678</td>\n",
       "      <td>605</td>\n",
       "      <td>8</td>\n",
       "      <td>660</td>\n",
       "      <td>12400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>South Vancouver</td>\n",
       "      <td>49</td>\n",
       "      <td>156</td>\n",
       "      <td>187</td>\n",
       "      <td>88</td>\n",
       "      <td>483</td>\n",
       "      <td>36</td>\n",
       "      <td>71</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "      <td>1182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>West Side</td>\n",
       "      <td>403</td>\n",
       "      <td>1000</td>\n",
       "      <td>1062</td>\n",
       "      <td>696</td>\n",
       "      <td>2838</td>\n",
       "      <td>588</td>\n",
       "      <td>225</td>\n",
       "      <td>3</td>\n",
       "      <td>389</td>\n",
       "      <td>7204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>All</td>\n",
       "      <td>2025</td>\n",
       "      <td>2397</td>\n",
       "      <td>5721</td>\n",
       "      <td>4947</td>\n",
       "      <td>14946</td>\n",
       "      <td>2159</td>\n",
       "      <td>1146</td>\n",
       "      <td>13</td>\n",
       "      <td>1474</td>\n",
       "      <td>34828</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      Year                                    \\\n",
       "Type            Break and Enter Commercial Break and Enter Residential/Other   \n",
       "Borough                                                                        \n",
       "Central                                787                               198   \n",
       "East Side                              786                              1043   \n",
       "South Vancouver                         49                               156   \n",
       "West Side                              403                              1000   \n",
       "All                                   2025                              2397   \n",
       "\n",
       "                                                                          \\\n",
       "Type            Mischief Other Theft Theft from Vehicle Theft of Bicycle   \n",
       "Borough                                                                    \n",
       "Central             2280        2489               6871              857   \n",
       "East Side           2192        1674               4754              678   \n",
       "South Vancouver      187          88                483               36   \n",
       "West Side           1062         696               2838              588   \n",
       "All                 5721        4947              14946             2159   \n",
       "\n",
       "                                  \\\n",
       "Type            Theft of Vehicle   \n",
       "Borough                            \n",
       "Central                      245   \n",
       "East Side                    605   \n",
       "South Vancouver               71   \n",
       "West Side                    225   \n",
       "All                         1146   \n",
       "\n",
       "                                                                        \\\n",
       "Type            Vehicle Collision or Pedestrian Struck (with Fatality)   \n",
       "Borough                                                                  \n",
       "Central                                                          1       \n",
       "East Side                                                        8       \n",
       "South Vancouver                                                  1       \n",
       "West Side                                                        3       \n",
       "All                                                             13       \n",
       "\n",
       "                                                                             \n",
       "Type            Vehicle Collision or Pedestrian Struck (with Injury)    All  \n",
       "Borough                                                                      \n",
       "Central                                                        314    14042  \n",
       "East Side                                                      660    12400  \n",
       "South Vancouver                                                111     1182  \n",
       "West Side                                                      389     7204  \n",
       "All                                                           1474    34828  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_crime_cat = pd.pivot_table(vnc_boroughs_crime,\n",
    "                               values=['Year'],\n",
    "                               index=['Borough'],\n",
    "                               columns=['Type'],\n",
    "                               aggfunc=len,\n",
    "                               fill_value=0,\n",
    "                               margins=True)\n",
    "vnc_crime_cat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>YearBreak and Enter Commercial</th>\n",
       "      <th>YearBreak and Enter Residential/Other</th>\n",
       "      <th>YearMischief</th>\n",
       "      <th>YearOther Theft</th>\n",
       "      <th>YearTheft from Vehicle</th>\n",
       "      <th>YearTheft of Bicycle</th>\n",
       "      <th>YearTheft of Vehicle</th>\n",
       "      <th>YearVehicle Collision or Pedestrian Struck (with Fatality)</th>\n",
       "      <th>YearVehicle Collision or Pedestrian Struck (with Injury)</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Central</td>\n",
       "      <td>787</td>\n",
       "      <td>198</td>\n",
       "      <td>2280</td>\n",
       "      <td>2489</td>\n",
       "      <td>6871</td>\n",
       "      <td>857</td>\n",
       "      <td>245</td>\n",
       "      <td>1</td>\n",
       "      <td>314</td>\n",
       "      <td>14042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>East Side</td>\n",
       "      <td>786</td>\n",
       "      <td>1043</td>\n",
       "      <td>2192</td>\n",
       "      <td>1674</td>\n",
       "      <td>4754</td>\n",
       "      <td>678</td>\n",
       "      <td>605</td>\n",
       "      <td>8</td>\n",
       "      <td>660</td>\n",
       "      <td>12400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>South Vancouver</td>\n",
       "      <td>49</td>\n",
       "      <td>156</td>\n",
       "      <td>187</td>\n",
       "      <td>88</td>\n",
       "      <td>483</td>\n",
       "      <td>36</td>\n",
       "      <td>71</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "      <td>1182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>West Side</td>\n",
       "      <td>403</td>\n",
       "      <td>1000</td>\n",
       "      <td>1062</td>\n",
       "      <td>696</td>\n",
       "      <td>2838</td>\n",
       "      <td>588</td>\n",
       "      <td>225</td>\n",
       "      <td>3</td>\n",
       "      <td>389</td>\n",
       "      <td>7204</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Borough  YearBreak and Enter Commercial  \\\n",
       "0          Central                             787   \n",
       "1        East Side                             786   \n",
       "2  South Vancouver                              49   \n",
       "3        West Side                             403   \n",
       "\n",
       "   YearBreak and Enter Residential/Other  YearMischief  YearOther Theft  \\\n",
       "0                                    198          2280             2489   \n",
       "1                                   1043          2192             1674   \n",
       "2                                    156           187               88   \n",
       "3                                   1000          1062              696   \n",
       "\n",
       "   YearTheft from Vehicle  YearTheft of Bicycle  YearTheft of Vehicle  \\\n",
       "0                    6871                   857                   245   \n",
       "1                    4754                   678                   605   \n",
       "2                     483                    36                    71   \n",
       "3                    2838                   588                   225   \n",
       "\n",
       "   YearVehicle Collision or Pedestrian Struck (with Fatality)  \\\n",
       "0                                                  1            \n",
       "1                                                  8            \n",
       "2                                                  1            \n",
       "3                                                  3            \n",
       "\n",
       "   YearVehicle Collision or Pedestrian Struck (with Injury)  Total  \n",
       "0                                                314         14042  \n",
       "1                                                660         12400  \n",
       "2                                                111          1182  \n",
       "3                                                389          7204  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merge data\n",
    "vnc_crime_cat.reset_index(inplace = True)\n",
    "vnc_crime_cat.columns = vnc_crime_cat.columns.map(''.join)\n",
    "vnc_crime_cat.rename(columns={'YearAll':'Total'}, inplace=True)\n",
    "# To ignore bottom All in Borough\n",
    "vnc_crime_cat = vnc_crime_cat.head(4)\n",
    "vnc_crime_cat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"10\" halign=\"left\">Year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Type</th>\n",
       "      <th>Break and Enter Commercial</th>\n",
       "      <th>Break and Enter Residential/Other</th>\n",
       "      <th>Mischief</th>\n",
       "      <th>Other Theft</th>\n",
       "      <th>Theft from Vehicle</th>\n",
       "      <th>Theft of Bicycle</th>\n",
       "      <th>Theft of Vehicle</th>\n",
       "      <th>Vehicle Collision or Pedestrian Struck (with Fatality)</th>\n",
       "      <th>Vehicle Collision or Pedestrian Struck (with Injury)</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Arbutus Ridge</td>\n",
       "      <td>12</td>\n",
       "      <td>78</td>\n",
       "      <td>49</td>\n",
       "      <td>18</td>\n",
       "      <td>111</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Central Business District</td>\n",
       "      <td>551</td>\n",
       "      <td>124</td>\n",
       "      <td>1812</td>\n",
       "      <td>2034</td>\n",
       "      <td>5301</td>\n",
       "      <td>640</td>\n",
       "      <td>165</td>\n",
       "      <td>0</td>\n",
       "      <td>230</td>\n",
       "      <td>10857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Dunbar-Southlands</td>\n",
       "      <td>8</td>\n",
       "      <td>106</td>\n",
       "      <td>81</td>\n",
       "      <td>31</td>\n",
       "      <td>199</td>\n",
       "      <td>16</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Fairview</td>\n",
       "      <td>138</td>\n",
       "      <td>73</td>\n",
       "      <td>233</td>\n",
       "      <td>297</td>\n",
       "      <td>692</td>\n",
       "      <td>245</td>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>62</td>\n",
       "      <td>1795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Grandview-Woodland</td>\n",
       "      <td>148</td>\n",
       "      <td>162</td>\n",
       "      <td>304</td>\n",
       "      <td>215</td>\n",
       "      <td>634</td>\n",
       "      <td>110</td>\n",
       "      <td>123</td>\n",
       "      <td>0</td>\n",
       "      <td>65</td>\n",
       "      <td>1761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Hastings-Sunrise</td>\n",
       "      <td>48</td>\n",
       "      <td>117</td>\n",
       "      <td>195</td>\n",
       "      <td>107</td>\n",
       "      <td>607</td>\n",
       "      <td>52</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>70</td>\n",
       "      <td>1270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Kensington-Cedar Cottage</td>\n",
       "      <td>62</td>\n",
       "      <td>145</td>\n",
       "      <td>255</td>\n",
       "      <td>148</td>\n",
       "      <td>541</td>\n",
       "      <td>69</td>\n",
       "      <td>71</td>\n",
       "      <td>3</td>\n",
       "      <td>97</td>\n",
       "      <td>1391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Kerrisdale</td>\n",
       "      <td>24</td>\n",
       "      <td>97</td>\n",
       "      <td>49</td>\n",
       "      <td>9</td>\n",
       "      <td>172</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Killarney</td>\n",
       "      <td>34</td>\n",
       "      <td>72</td>\n",
       "      <td>90</td>\n",
       "      <td>31</td>\n",
       "      <td>240</td>\n",
       "      <td>19</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Kitsilano</td>\n",
       "      <td>106</td>\n",
       "      <td>165</td>\n",
       "      <td>320</td>\n",
       "      <td>154</td>\n",
       "      <td>755</td>\n",
       "      <td>189</td>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>61</td>\n",
       "      <td>1802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Marpole</td>\n",
       "      <td>44</td>\n",
       "      <td>125</td>\n",
       "      <td>134</td>\n",
       "      <td>75</td>\n",
       "      <td>290</td>\n",
       "      <td>34</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>87</td>\n",
       "      <td>828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Mount Pleasant</td>\n",
       "      <td>205</td>\n",
       "      <td>124</td>\n",
       "      <td>353</td>\n",
       "      <td>493</td>\n",
       "      <td>822</td>\n",
       "      <td>232</td>\n",
       "      <td>67</td>\n",
       "      <td>0</td>\n",
       "      <td>100</td>\n",
       "      <td>2396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Musqueam</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Oakridge</td>\n",
       "      <td>19</td>\n",
       "      <td>123</td>\n",
       "      <td>64</td>\n",
       "      <td>63</td>\n",
       "      <td>164</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Renfrew-Collingwood</td>\n",
       "      <td>91</td>\n",
       "      <td>156</td>\n",
       "      <td>243</td>\n",
       "      <td>472</td>\n",
       "      <td>569</td>\n",
       "      <td>37</td>\n",
       "      <td>92</td>\n",
       "      <td>0</td>\n",
       "      <td>102</td>\n",
       "      <td>1762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Riley Park</td>\n",
       "      <td>35</td>\n",
       "      <td>122</td>\n",
       "      <td>140</td>\n",
       "      <td>53</td>\n",
       "      <td>378</td>\n",
       "      <td>52</td>\n",
       "      <td>39</td>\n",
       "      <td>2</td>\n",
       "      <td>45</td>\n",
       "      <td>866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Shaughnessy</td>\n",
       "      <td>12</td>\n",
       "      <td>120</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>187</td>\n",
       "      <td>10</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>South Cambie</td>\n",
       "      <td>22</td>\n",
       "      <td>42</td>\n",
       "      <td>41</td>\n",
       "      <td>38</td>\n",
       "      <td>111</td>\n",
       "      <td>19</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Stanley Park</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>109</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Strathcona</td>\n",
       "      <td>160</td>\n",
       "      <td>124</td>\n",
       "      <td>527</td>\n",
       "      <td>81</td>\n",
       "      <td>821</td>\n",
       "      <td>108</td>\n",
       "      <td>76</td>\n",
       "      <td>2</td>\n",
       "      <td>88</td>\n",
       "      <td>1987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Sunset</td>\n",
       "      <td>37</td>\n",
       "      <td>93</td>\n",
       "      <td>175</td>\n",
       "      <td>105</td>\n",
       "      <td>382</td>\n",
       "      <td>18</td>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>93</td>\n",
       "      <td>967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Victoria-Fraserview</td>\n",
       "      <td>15</td>\n",
       "      <td>80</td>\n",
       "      <td>94</td>\n",
       "      <td>57</td>\n",
       "      <td>239</td>\n",
       "      <td>15</td>\n",
       "      <td>36</td>\n",
       "      <td>1</td>\n",
       "      <td>63</td>\n",
       "      <td>600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>West End</td>\n",
       "      <td>230</td>\n",
       "      <td>72</td>\n",
       "      <td>460</td>\n",
       "      <td>455</td>\n",
       "      <td>1461</td>\n",
       "      <td>203</td>\n",
       "      <td>77</td>\n",
       "      <td>1</td>\n",
       "      <td>72</td>\n",
       "      <td>3031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>West Point Grey</td>\n",
       "      <td>18</td>\n",
       "      <td>71</td>\n",
       "      <td>50</td>\n",
       "      <td>11</td>\n",
       "      <td>157</td>\n",
       "      <td>32</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>All</td>\n",
       "      <td>2025</td>\n",
       "      <td>2397</td>\n",
       "      <td>5721</td>\n",
       "      <td>4947</td>\n",
       "      <td>14946</td>\n",
       "      <td>2159</td>\n",
       "      <td>1146</td>\n",
       "      <td>13</td>\n",
       "      <td>1474</td>\n",
       "      <td>34828</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                Year  \\\n",
       "Type                      Break and Enter Commercial   \n",
       "Neighbourhood                                          \n",
       "Arbutus Ridge                                     12   \n",
       "Central Business District                        551   \n",
       "Dunbar-Southlands                                  8   \n",
       "Fairview                                         138   \n",
       "Grandview-Woodland                               148   \n",
       "Hastings-Sunrise                                  48   \n",
       "Kensington-Cedar Cottage                          62   \n",
       "Kerrisdale                                        24   \n",
       "Killarney                                         34   \n",
       "Kitsilano                                        106   \n",
       "Marpole                                           44   \n",
       "Mount Pleasant                                   205   \n",
       "Musqueam                                           0   \n",
       "Oakridge                                          19   \n",
       "Renfrew-Collingwood                               91   \n",
       "Riley Park                                        35   \n",
       "Shaughnessy                                       12   \n",
       "South Cambie                                      22   \n",
       "Stanley Park                                       6   \n",
       "Strathcona                                       160   \n",
       "Sunset                                            37   \n",
       "Victoria-Fraserview                               15   \n",
       "West End                                         230   \n",
       "West Point Grey                                   18   \n",
       "All                                             2025   \n",
       "\n",
       "                                                                      \\\n",
       "Type                      Break and Enter Residential/Other Mischief   \n",
       "Neighbourhood                                                          \n",
       "Arbutus Ridge                                            78       49   \n",
       "Central Business District                               124     1812   \n",
       "Dunbar-Southlands                                       106       81   \n",
       "Fairview                                                 73      233   \n",
       "Grandview-Woodland                                      162      304   \n",
       "Hastings-Sunrise                                        117      195   \n",
       "Kensington-Cedar Cottage                                145      255   \n",
       "Kerrisdale                                               97       49   \n",
       "Killarney                                                72       90   \n",
       "Kitsilano                                               165      320   \n",
       "Marpole                                                 125      134   \n",
       "Mount Pleasant                                          124      353   \n",
       "Musqueam                                                  4        3   \n",
       "Oakridge                                                123       64   \n",
       "Renfrew-Collingwood                                     156      243   \n",
       "Riley Park                                              122      140   \n",
       "Shaughnessy                                             120       41   \n",
       "South Cambie                                             42       41   \n",
       "Stanley Park                                              2        8   \n",
       "Strathcona                                              124      527   \n",
       "Sunset                                                   93      175   \n",
       "Victoria-Fraserview                                      80       94   \n",
       "West End                                                 72      460   \n",
       "West Point Grey                                          71       50   \n",
       "All                                                    2397     5721   \n",
       "\n",
       "                                                                           \\\n",
       "Type                      Other Theft Theft from Vehicle Theft of Bicycle   \n",
       "Neighbourhood                                                               \n",
       "Arbutus Ridge                      18                111               12   \n",
       "Central Business District        2034               5301              640   \n",
       "Dunbar-Southlands                  31                199               16   \n",
       "Fairview                          297                692              245   \n",
       "Grandview-Woodland                215                634              110   \n",
       "Hastings-Sunrise                  107                607               52   \n",
       "Kensington-Cedar Cottage          148                541               69   \n",
       "Kerrisdale                          9                172               13   \n",
       "Killarney                          31                240               19   \n",
       "Kitsilano                         154                755              189   \n",
       "Marpole                            75                290               34   \n",
       "Mount Pleasant                    493                822              232   \n",
       "Musqueam                            0                  4                2   \n",
       "Oakridge                           63                164               18   \n",
       "Renfrew-Collingwood               472                569               37   \n",
       "Riley Park                         53                378               52   \n",
       "Shaughnessy                         0                187               10   \n",
       "South Cambie                       38                111               19   \n",
       "Stanley Park                        0                109               14   \n",
       "Strathcona                         81                821              108   \n",
       "Sunset                            105                382               18   \n",
       "Victoria-Fraserview                57                239               15   \n",
       "West End                          455               1461              203   \n",
       "West Point Grey                    11                157               32   \n",
       "All                              4947              14946             2159   \n",
       "\n",
       "                                            \\\n",
       "Type                      Theft of Vehicle   \n",
       "Neighbourhood                                \n",
       "Arbutus Ridge                           12   \n",
       "Central Business District              165   \n",
       "Dunbar-Southlands                        9   \n",
       "Fairview                                55   \n",
       "Grandview-Woodland                     123   \n",
       "Hastings-Sunrise                        74   \n",
       "Kensington-Cedar Cottage                71   \n",
       "Kerrisdale                              11   \n",
       "Killarney                               33   \n",
       "Kitsilano                               51   \n",
       "Marpole                                 39   \n",
       "Mount Pleasant                          67   \n",
       "Musqueam                                 2   \n",
       "Oakridge                                18   \n",
       "Renfrew-Collingwood                     92   \n",
       "Riley Park                              39   \n",
       "Shaughnessy                             11   \n",
       "South Cambie                             8   \n",
       "Stanley Park                             3   \n",
       "Strathcona                              76   \n",
       "Sunset                                  63   \n",
       "Victoria-Fraserview                     36   \n",
       "West End                                77   \n",
       "West Point Grey                         11   \n",
       "All                                   1146   \n",
       "\n",
       "                                                                                  \\\n",
       "Type                      Vehicle Collision or Pedestrian Struck (with Fatality)   \n",
       "Neighbourhood                                                                      \n",
       "Arbutus Ridge                                                              1       \n",
       "Central Business District                                                  0       \n",
       "Dunbar-Southlands                                                          1       \n",
       "Fairview                                                                   0       \n",
       "Grandview-Woodland                                                         0       \n",
       "Hastings-Sunrise                                                           0       \n",
       "Kensington-Cedar Cottage                                                   3       \n",
       "Kerrisdale                                                                 0       \n",
       "Killarney                                                                  0       \n",
       "Kitsilano                                                                  1       \n",
       "Marpole                                                                    0       \n",
       "Mount Pleasant                                                             0       \n",
       "Musqueam                                                                   0       \n",
       "Oakridge                                                                   0       \n",
       "Renfrew-Collingwood                                                        0       \n",
       "Riley Park                                                                 2       \n",
       "Shaughnessy                                                                0       \n",
       "South Cambie                                                               0       \n",
       "Stanley Park                                                               0       \n",
       "Strathcona                                                                 2       \n",
       "Sunset                                                                     1       \n",
       "Victoria-Fraserview                                                        1       \n",
       "West End                                                                   1       \n",
       "West Point Grey                                                            0       \n",
       "All                                                                       13       \n",
       "\n",
       "                                                                                \\\n",
       "Type                      Vehicle Collision or Pedestrian Struck (with Injury)   \n",
       "Neighbourhood                                                                    \n",
       "Arbutus Ridge                                                             18     \n",
       "Central Business District                                                230     \n",
       "Dunbar-Southlands                                                         23     \n",
       "Fairview                                                                  62     \n",
       "Grandview-Woodland                                                        65     \n",
       "Hastings-Sunrise                                                          70     \n",
       "Kensington-Cedar Cottage                                                  97     \n",
       "Kerrisdale                                                                42     \n",
       "Killarney                                                                 46     \n",
       "Kitsilano                                                                 61     \n",
       "Marpole                                                                   87     \n",
       "Mount Pleasant                                                           100     \n",
       "Musqueam                                                                   2     \n",
       "Oakridge                                                                  30     \n",
       "Renfrew-Collingwood                                                      102     \n",
       "Riley Park                                                                45     \n",
       "Shaughnessy                                                               33     \n",
       "South Cambie                                                              11     \n",
       "Stanley Park                                                              12     \n",
       "Strathcona                                                                88     \n",
       "Sunset                                                                    93     \n",
       "Victoria-Fraserview                                                       63     \n",
       "West End                                                                  72     \n",
       "West Point Grey                                                           22     \n",
       "All                                                                     1474     \n",
       "\n",
       "                                  \n",
       "Type                         All  \n",
       "Neighbourhood                     \n",
       "Arbutus Ridge                311  \n",
       "Central Business District  10857  \n",
       "Dunbar-Southlands            474  \n",
       "Fairview                    1795  \n",
       "Grandview-Woodland          1761  \n",
       "Hastings-Sunrise            1270  \n",
       "Kensington-Cedar Cottage    1391  \n",
       "Kerrisdale                   417  \n",
       "Killarney                    565  \n",
       "Kitsilano                   1802  \n",
       "Marpole                      828  \n",
       "Mount Pleasant              2396  \n",
       "Musqueam                      17  \n",
       "Oakridge                     499  \n",
       "Renfrew-Collingwood         1762  \n",
       "Riley Park                   866  \n",
       "Shaughnessy                  414  \n",
       "South Cambie                 292  \n",
       "Stanley Park                 154  \n",
       "Strathcona                  1987  \n",
       "Sunset                       967  \n",
       "Victoria-Fraserview          600  \n",
       "West End                    3031  \n",
       "West Point Grey              372  \n",
       "All                        34828  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_crime_neigh = pd.pivot_table(vnc_boroughs_crime,\n",
    "                               values=['Year'],\n",
    "                               index=['Neighbourhood'],\n",
    "                               columns=['Type'],\n",
    "                               aggfunc=len,\n",
    "                               fill_value=0,\n",
    "                               margins=True)\n",
    "vnc_crime_neigh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>YearBreak and Enter Commercial</th>\n",
       "      <th>YearBreak and Enter Residential/Other</th>\n",
       "      <th>YearMischief</th>\n",
       "      <th>YearOther Theft</th>\n",
       "      <th>YearTheft from Vehicle</th>\n",
       "      <th>YearTheft of Bicycle</th>\n",
       "      <th>YearTheft of Vehicle</th>\n",
       "      <th>YearVehicle Collision or Pedestrian Struck (with Fatality)</th>\n",
       "      <th>YearVehicle Collision or Pedestrian Struck (with Injury)</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Arbutus Ridge</td>\n",
       "      <td>12</td>\n",
       "      <td>78</td>\n",
       "      <td>49</td>\n",
       "      <td>18</td>\n",
       "      <td>111</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Central Business District</td>\n",
       "      <td>551</td>\n",
       "      <td>124</td>\n",
       "      <td>1812</td>\n",
       "      <td>2034</td>\n",
       "      <td>5301</td>\n",
       "      <td>640</td>\n",
       "      <td>165</td>\n",
       "      <td>0</td>\n",
       "      <td>230</td>\n",
       "      <td>10857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Dunbar-Southlands</td>\n",
       "      <td>8</td>\n",
       "      <td>106</td>\n",
       "      <td>81</td>\n",
       "      <td>31</td>\n",
       "      <td>199</td>\n",
       "      <td>16</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>138</td>\n",
       "      <td>73</td>\n",
       "      <td>233</td>\n",
       "      <td>297</td>\n",
       "      <td>692</td>\n",
       "      <td>245</td>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>62</td>\n",
       "      <td>1795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Grandview-Woodland</td>\n",
       "      <td>148</td>\n",
       "      <td>162</td>\n",
       "      <td>304</td>\n",
       "      <td>215</td>\n",
       "      <td>634</td>\n",
       "      <td>110</td>\n",
       "      <td>123</td>\n",
       "      <td>0</td>\n",
       "      <td>65</td>\n",
       "      <td>1761</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Neighbourhood  YearBreak and Enter Commercial  \\\n",
       "0              Arbutus Ridge                              12   \n",
       "1  Central Business District                             551   \n",
       "2          Dunbar-Southlands                               8   \n",
       "3                   Fairview                             138   \n",
       "4         Grandview-Woodland                             148   \n",
       "\n",
       "   YearBreak and Enter Residential/Other  YearMischief  YearOther Theft  \\\n",
       "0                                     78            49               18   \n",
       "1                                    124          1812             2034   \n",
       "2                                    106            81               31   \n",
       "3                                     73           233              297   \n",
       "4                                    162           304              215   \n",
       "\n",
       "   YearTheft from Vehicle  YearTheft of Bicycle  YearTheft of Vehicle  \\\n",
       "0                     111                    12                    12   \n",
       "1                    5301                   640                   165   \n",
       "2                     199                    16                     9   \n",
       "3                     692                   245                    55   \n",
       "4                     634                   110                   123   \n",
       "\n",
       "   YearVehicle Collision or Pedestrian Struck (with Fatality)  \\\n",
       "0                                                  1            \n",
       "1                                                  0            \n",
       "2                                                  1            \n",
       "3                                                  0            \n",
       "4                                                  0            \n",
       "\n",
       "   YearVehicle Collision or Pedestrian Struck (with Injury)  Total  \n",
       "0                                                 18           311  \n",
       "1                                                230         10857  \n",
       "2                                                 23           474  \n",
       "3                                                 62          1795  \n",
       "4                                                 65          1761  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_crime_neigh.reset_index(inplace = True)\n",
    "vnc_crime_neigh.columns = vnc_crime_neigh.columns.map(''.join)\n",
    "vnc_crime_neigh.rename(columns={'YearAll':'Total'}, inplace=True)\n",
    "\n",
    "vnc_crime_neigh.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearBreak and Enter Commercial</th>\n",
       "      <th>YearBreak and Enter Residential/Other</th>\n",
       "      <th>YearMischief</th>\n",
       "      <th>YearOther Theft</th>\n",
       "      <th>YearTheft from Vehicle</th>\n",
       "      <th>YearTheft of Bicycle</th>\n",
       "      <th>YearTheft of Vehicle</th>\n",
       "      <th>YearVehicle Collision or Pedestrian Struck (with Fatality)</th>\n",
       "      <th>YearVehicle Collision or Pedestrian Struck (with Injury)</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.00000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>506.250000</td>\n",
       "      <td>599.250000</td>\n",
       "      <td>1430.25000</td>\n",
       "      <td>1236.750000</td>\n",
       "      <td>3736.500000</td>\n",
       "      <td>539.750000</td>\n",
       "      <td>286.500000</td>\n",
       "      <td>3.250000</td>\n",
       "      <td>368.500000</td>\n",
       "      <td>8707.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>354.409721</td>\n",
       "      <td>488.189427</td>\n",
       "      <td>997.26572</td>\n",
       "      <td>1060.087221</td>\n",
       "      <td>2723.536977</td>\n",
       "      <td>353.955153</td>\n",
       "      <td>226.117226</td>\n",
       "      <td>3.304038</td>\n",
       "      <td>227.060198</td>\n",
       "      <td>5801.870618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>187.00000</td>\n",
       "      <td>88.000000</td>\n",
       "      <td>483.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>111.000000</td>\n",
       "      <td>1182.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>314.500000</td>\n",
       "      <td>187.500000</td>\n",
       "      <td>843.25000</td>\n",
       "      <td>544.000000</td>\n",
       "      <td>2249.250000</td>\n",
       "      <td>450.000000</td>\n",
       "      <td>186.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>263.250000</td>\n",
       "      <td>5698.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>594.500000</td>\n",
       "      <td>599.000000</td>\n",
       "      <td>1627.00000</td>\n",
       "      <td>1185.000000</td>\n",
       "      <td>3796.000000</td>\n",
       "      <td>633.000000</td>\n",
       "      <td>235.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>351.500000</td>\n",
       "      <td>9802.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>786.250000</td>\n",
       "      <td>1010.750000</td>\n",
       "      <td>2214.00000</td>\n",
       "      <td>1877.750000</td>\n",
       "      <td>5283.250000</td>\n",
       "      <td>722.750000</td>\n",
       "      <td>335.000000</td>\n",
       "      <td>4.250000</td>\n",
       "      <td>456.750000</td>\n",
       "      <td>12810.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>787.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "      <td>2280.00000</td>\n",
       "      <td>2489.000000</td>\n",
       "      <td>6871.000000</td>\n",
       "      <td>857.000000</td>\n",
       "      <td>605.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>660.000000</td>\n",
       "      <td>14042.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       YearBreak and Enter Commercial  YearBreak and Enter Residential/Other  \\\n",
       "count                        4.000000                               4.000000   \n",
       "mean                       506.250000                             599.250000   \n",
       "std                        354.409721                             488.189427   \n",
       "min                         49.000000                             156.000000   \n",
       "25%                        314.500000                             187.500000   \n",
       "50%                        594.500000                             599.000000   \n",
       "75%                        786.250000                            1010.750000   \n",
       "max                        787.000000                            1043.000000   \n",
       "\n",
       "       YearMischief  YearOther Theft  YearTheft from Vehicle  \\\n",
       "count       4.00000         4.000000                4.000000   \n",
       "mean     1430.25000      1236.750000             3736.500000   \n",
       "std       997.26572      1060.087221             2723.536977   \n",
       "min       187.00000        88.000000              483.000000   \n",
       "25%       843.25000       544.000000             2249.250000   \n",
       "50%      1627.00000      1185.000000             3796.000000   \n",
       "75%      2214.00000      1877.750000             5283.250000   \n",
       "max      2280.00000      2489.000000             6871.000000   \n",
       "\n",
       "       YearTheft of Bicycle  YearTheft of Vehicle  \\\n",
       "count              4.000000              4.000000   \n",
       "mean             539.750000            286.500000   \n",
       "std              353.955153            226.117226   \n",
       "min               36.000000             71.000000   \n",
       "25%              450.000000            186.500000   \n",
       "50%              633.000000            235.000000   \n",
       "75%              722.750000            335.000000   \n",
       "max              857.000000            605.000000   \n",
       "\n",
       "       YearVehicle Collision or Pedestrian Struck (with Fatality)  \\\n",
       "count                                           4.000000            \n",
       "mean                                            3.250000            \n",
       "std                                             3.304038            \n",
       "min                                             1.000000            \n",
       "25%                                             1.000000            \n",
       "50%                                             2.000000            \n",
       "75%                                             4.250000            \n",
       "max                                             8.000000            \n",
       "\n",
       "       YearVehicle Collision or Pedestrian Struck (with Injury)         Total  \n",
       "count                                           4.000000             4.000000  \n",
       "mean                                          368.500000          8707.000000  \n",
       "std                                           227.060198          5801.870618  \n",
       "min                                           111.000000          1182.000000  \n",
       "25%                                           263.250000          5698.500000  \n",
       "50%                                           351.500000          9802.000000  \n",
       "75%                                           456.750000         12810.500000  \n",
       "max                                           660.000000         14042.000000  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_crime_cat.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualise data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>YearBreak and Enter Commercial</th>\n",
       "      <th>YearBreak and Enter Residential/Other</th>\n",
       "      <th>YearMischief</th>\n",
       "      <th>YearOther Theft</th>\n",
       "      <th>YearTheft from Vehicle</th>\n",
       "      <th>YearTheft of Bicycle</th>\n",
       "      <th>YearTheft of Vehicle</th>\n",
       "      <th>YearVehicle Collision or Pedestrian Struck (with Fatality)</th>\n",
       "      <th>YearVehicle Collision or Pedestrian Struck (with Injury)</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Central Business District</td>\n",
       "      <td>551</td>\n",
       "      <td>124</td>\n",
       "      <td>1812</td>\n",
       "      <td>2034</td>\n",
       "      <td>5301</td>\n",
       "      <td>640</td>\n",
       "      <td>165</td>\n",
       "      <td>0</td>\n",
       "      <td>230</td>\n",
       "      <td>10857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22</td>\n",
       "      <td>West End</td>\n",
       "      <td>230</td>\n",
       "      <td>72</td>\n",
       "      <td>460</td>\n",
       "      <td>455</td>\n",
       "      <td>1461</td>\n",
       "      <td>203</td>\n",
       "      <td>77</td>\n",
       "      <td>1</td>\n",
       "      <td>72</td>\n",
       "      <td>3031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>Mount Pleasant</td>\n",
       "      <td>205</td>\n",
       "      <td>124</td>\n",
       "      <td>353</td>\n",
       "      <td>493</td>\n",
       "      <td>822</td>\n",
       "      <td>232</td>\n",
       "      <td>67</td>\n",
       "      <td>0</td>\n",
       "      <td>100</td>\n",
       "      <td>2396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>Strathcona</td>\n",
       "      <td>160</td>\n",
       "      <td>124</td>\n",
       "      <td>527</td>\n",
       "      <td>81</td>\n",
       "      <td>821</td>\n",
       "      <td>108</td>\n",
       "      <td>76</td>\n",
       "      <td>2</td>\n",
       "      <td>88</td>\n",
       "      <td>1987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Kitsilano</td>\n",
       "      <td>106</td>\n",
       "      <td>165</td>\n",
       "      <td>320</td>\n",
       "      <td>154</td>\n",
       "      <td>755</td>\n",
       "      <td>189</td>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>61</td>\n",
       "      <td>1802</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Neighbourhood  YearBreak and Enter Commercial  \\\n",
       "1   Central Business District                             551   \n",
       "22                   West End                             230   \n",
       "11             Mount Pleasant                             205   \n",
       "19                 Strathcona                             160   \n",
       "9                   Kitsilano                             106   \n",
       "\n",
       "    YearBreak and Enter Residential/Other  YearMischief  YearOther Theft  \\\n",
       "1                                     124          1812             2034   \n",
       "22                                     72           460              455   \n",
       "11                                    124           353              493   \n",
       "19                                    124           527               81   \n",
       "9                                     165           320              154   \n",
       "\n",
       "    YearTheft from Vehicle  YearTheft of Bicycle  YearTheft of Vehicle  \\\n",
       "1                     5301                   640                   165   \n",
       "22                    1461                   203                    77   \n",
       "11                     822                   232                    67   \n",
       "19                     821                   108                    76   \n",
       "9                      755                   189                    51   \n",
       "\n",
       "    YearVehicle Collision or Pedestrian Struck (with Fatality)  \\\n",
       "1                                                   0            \n",
       "22                                                  1            \n",
       "11                                                  0            \n",
       "19                                                  2            \n",
       "9                                                   1            \n",
       "\n",
       "    YearVehicle Collision or Pedestrian Struck (with Injury)  Total  \n",
       "1                                                 230         10857  \n",
       "22                                                 72          3031  \n",
       "11                                                100          2396  \n",
       "19                                                 88          1987  \n",
       "9                                                  61          1802  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_crime_neigh.sort_values(['Total'], ascending = False, axis = 0, inplace = True )\n",
    "\n",
    "crime_neigh_top5 = vnc_crime_neigh.iloc[1:6]\n",
    "crime_neigh_top5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "per_neigh = crime_neigh_top5[['Neighbourhood','Total']]\n",
    "\n",
    "per_neigh.set_index('Neighbourhood',inplace = True)\n",
    "\n",
    "ax = per_neigh.plot(kind='bar', figsize=(10, 6), rot=0)\n",
    "\n",
    "ax.set_ylabel('Number of Crimes')\n",
    "ax.set_xlabel('Neighbourhood')\n",
    "ax.set_title('Neighbourhoods in Vancouver with the Highest crimes')\n",
    "\n",
    "for p in ax.patches:\n",
    "    ax.annotate(np.round(p.get_height(),decimals=2), \n",
    "                (p.get_x()+p.get_width()/2., p.get_height()), \n",
    "                ha='center', \n",
    "                va='center', \n",
    "                xytext=(0, 10), \n",
    "                textcoords='offset points',\n",
    "                fontsize = 14,\n",
    "               )\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"10\" halign=\"left\">Year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Type</th>\n",
       "      <th>Break and Enter Commercial</th>\n",
       "      <th>Break and Enter Residential/Other</th>\n",
       "      <th>Mischief</th>\n",
       "      <th>Other Theft</th>\n",
       "      <th>Theft from Vehicle</th>\n",
       "      <th>Theft of Bicycle</th>\n",
       "      <th>Theft of Vehicle</th>\n",
       "      <th>Vehicle Collision or Pedestrian Struck (with Fatality)</th>\n",
       "      <th>Vehicle Collision or Pedestrian Struck (with Injury)</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Borough</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Central</td>\n",
       "      <td>787</td>\n",
       "      <td>198</td>\n",
       "      <td>2280</td>\n",
       "      <td>2489</td>\n",
       "      <td>6871</td>\n",
       "      <td>857</td>\n",
       "      <td>245</td>\n",
       "      <td>1</td>\n",
       "      <td>314</td>\n",
       "      <td>14042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>East Side</td>\n",
       "      <td>786</td>\n",
       "      <td>1043</td>\n",
       "      <td>2192</td>\n",
       "      <td>1674</td>\n",
       "      <td>4754</td>\n",
       "      <td>678</td>\n",
       "      <td>605</td>\n",
       "      <td>8</td>\n",
       "      <td>660</td>\n",
       "      <td>12400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>South Vancouver</td>\n",
       "      <td>49</td>\n",
       "      <td>156</td>\n",
       "      <td>187</td>\n",
       "      <td>88</td>\n",
       "      <td>483</td>\n",
       "      <td>36</td>\n",
       "      <td>71</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "      <td>1182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>West Side</td>\n",
       "      <td>403</td>\n",
       "      <td>1000</td>\n",
       "      <td>1062</td>\n",
       "      <td>696</td>\n",
       "      <td>2838</td>\n",
       "      <td>588</td>\n",
       "      <td>225</td>\n",
       "      <td>3</td>\n",
       "      <td>389</td>\n",
       "      <td>7204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>All</td>\n",
       "      <td>2025</td>\n",
       "      <td>2397</td>\n",
       "      <td>5721</td>\n",
       "      <td>4947</td>\n",
       "      <td>14946</td>\n",
       "      <td>2159</td>\n",
       "      <td>1146</td>\n",
       "      <td>13</td>\n",
       "      <td>1474</td>\n",
       "      <td>34828</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      Year                                    \\\n",
       "Type            Break and Enter Commercial Break and Enter Residential/Other   \n",
       "Borough                                                                        \n",
       "Central                                787                               198   \n",
       "East Side                              786                              1043   \n",
       "South Vancouver                         49                               156   \n",
       "West Side                              403                              1000   \n",
       "All                                   2025                              2397   \n",
       "\n",
       "                                                                          \\\n",
       "Type            Mischief Other Theft Theft from Vehicle Theft of Bicycle   \n",
       "Borough                                                                    \n",
       "Central             2280        2489               6871              857   \n",
       "East Side           2192        1674               4754              678   \n",
       "South Vancouver      187          88                483               36   \n",
       "West Side           1062         696               2838              588   \n",
       "All                 5721        4947              14946             2159   \n",
       "\n",
       "                                  \\\n",
       "Type            Theft of Vehicle   \n",
       "Borough                            \n",
       "Central                      245   \n",
       "East Side                    605   \n",
       "South Vancouver               71   \n",
       "West Side                    225   \n",
       "All                         1146   \n",
       "\n",
       "                                                                        \\\n",
       "Type            Vehicle Collision or Pedestrian Struck (with Fatality)   \n",
       "Borough                                                                  \n",
       "Central                                                          1       \n",
       "East Side                                                        8       \n",
       "South Vancouver                                                  1       \n",
       "West Side                                                        3       \n",
       "All                                                             13       \n",
       "\n",
       "                                                                             \n",
       "Type            Vehicle Collision or Pedestrian Struck (with Injury)    All  \n",
       "Borough                                                                      \n",
       "Central                                                        314    14042  \n",
       "East Side                                                      660    12400  \n",
       "South Vancouver                                                111     1182  \n",
       "West Side                                                      389     7204  \n",
       "All                                                           1474    34828  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_crime_cat = pd.pivot_table(vnc_boroughs_crime,\n",
    "                               values=['Year'],\n",
    "                               index=['Borough'],\n",
    "                               columns=['Type'],\n",
    "                               aggfunc=len,\n",
    "                               fill_value=0,\n",
    "                               margins=True)\n",
    "vnc_crime_cat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Break and Enter Commercial</th>\n",
       "      <th>Break and Enter Residential</th>\n",
       "      <th>Mischief</th>\n",
       "      <th>Other</th>\n",
       "      <th>Theft from Vehicle</th>\n",
       "      <th>Theft of Bicycle</th>\n",
       "      <th>Theft of Vehicle</th>\n",
       "      <th>Vehicle Collision or Pedestrian Struck (with Fatality)</th>\n",
       "      <th>Vehicle Collision or Pedestrian Struck (with Injury)</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Central</td>\n",
       "      <td>787</td>\n",
       "      <td>198</td>\n",
       "      <td>2280</td>\n",
       "      <td>2489</td>\n",
       "      <td>6871</td>\n",
       "      <td>857</td>\n",
       "      <td>245</td>\n",
       "      <td>1</td>\n",
       "      <td>314</td>\n",
       "      <td>14042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>East Side</td>\n",
       "      <td>786</td>\n",
       "      <td>1043</td>\n",
       "      <td>2192</td>\n",
       "      <td>1674</td>\n",
       "      <td>4754</td>\n",
       "      <td>678</td>\n",
       "      <td>605</td>\n",
       "      <td>8</td>\n",
       "      <td>660</td>\n",
       "      <td>12400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>South Vancouver</td>\n",
       "      <td>49</td>\n",
       "      <td>156</td>\n",
       "      <td>187</td>\n",
       "      <td>88</td>\n",
       "      <td>483</td>\n",
       "      <td>36</td>\n",
       "      <td>71</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "      <td>1182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>West Side</td>\n",
       "      <td>403</td>\n",
       "      <td>1000</td>\n",
       "      <td>1062</td>\n",
       "      <td>696</td>\n",
       "      <td>2838</td>\n",
       "      <td>588</td>\n",
       "      <td>225</td>\n",
       "      <td>3</td>\n",
       "      <td>389</td>\n",
       "      <td>7204</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Borough  Break and Enter Commercial  Break and Enter Residential  \\\n",
       "0          Central                         787                          198   \n",
       "1        East Side                         786                         1043   \n",
       "2  South Vancouver                          49                          156   \n",
       "3        West Side                         403                         1000   \n",
       "\n",
       "   Mischief  Other  Theft from Vehicle  Theft of Bicycle  Theft of Vehicle  \\\n",
       "0      2280   2489                6871               857               245   \n",
       "1      2192   1674                4754               678               605   \n",
       "2       187     88                 483                36                71   \n",
       "3      1062    696                2838               588               225   \n",
       "\n",
       "   Vehicle Collision or Pedestrian Struck (with Fatality)  \\\n",
       "0                                                  1        \n",
       "1                                                  8        \n",
       "2                                                  1        \n",
       "3                                                  3        \n",
       "\n",
       "   Vehicle Collision or Pedestrian Struck (with Injury)  Total  \n",
       "0                                                314     14042  \n",
       "1                                                660     12400  \n",
       "2                                                111      1182  \n",
       "3                                                389      7204  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_crime_cat.reset_index(inplace = True)\n",
    "vnc_crime_cat.columns = vnc_crime_cat.columns.map(''.join)\n",
    "vnc_crime_cat.rename(columns={'YearAll':'Total',\n",
    "                              'YearBreak and Enter Commercial' : 'Break and Enter Commercial',\n",
    "                              'YearBreak and Enter Residential/Other' : 'Break and Enter Residential',\n",
    "                              'YearMischief' : 'Mischief',\n",
    "                              'YearOther Theft' : 'Other',\n",
    "                              'YearTheft from Vehicle' : 'Theft from Vehicle',\n",
    "                              'YearTheft of Bicycle' : 'Theft of Bicycle',\n",
    "                              'YearTheft of Vehicle' : 'Theft of Vehicle',\n",
    "                              'YearVehicle Collision or Pedestrian Struck (with Fatality)' : 'Vehicle Collision or Pedestrian Struck (with Fatality)',\n",
    "                              'YearVehicle Collision or Pedestrian Struck (with Injury)' : 'Vehicle Collision or Pedestrian Struck (with Injury)'}, inplace=True)\n",
    "# To ignore bottom All in Borough\n",
    "vnc_crime_cat = vnc_crime_cat.head(4)\n",
    "vnc_crime_cat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAnMAAAGHCAYAAADbW9ScAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOzdeZgUxf3H8XfBigKKIisCi4oKAQ8U5RAT4wXihaBGyoNweCESAcUY8TbeGjyIF4LibfArmkAUOZLojxgEr0iCkiiKUVgBV/DglqV/f3TvOjs7uzsLOzvTy+f1PP3sdHV1d/V0zex3qruqXRAEiIiIiEg81ct2AURERERkyymYExEREYkxBXMiIiIiMaZgTkRERCTGFMyJiIiIxJiCOREREZEYUzAnkgXOuaOdc4FzrnUNb/d159yjNblNqR3OuTecc+OqyNM2qjfda2ufmeac6xkdU4tqrFOj70O2OOcucM6tz3Y5JP4UzElsOOeeiL7AS6ZvnXNvOudOynbZcsjpwKgtXdk518A5t8I5d1cFyw+N3vueW1xCqUgf4DclMzUZmDvnBjvnNtXEttLcX15UT85KsSw5gJkNtARW1Fb50uWcu9E5tyiDu3gW2CuD25dthII5iZu/E37xtwS6A+8Bf3LO7bs1G3XONaiBsmVdEAQrgyD4bivW3wg8AQxyzm2XIssQ4FPgr1u6j7qmpurO1p67uAqCYGMQBMuCINic7bLUFhfaLgiCdUEQLM92eST+FMxJ3JR88S8LgmAhMBrYDjioJINzbifn3CPOua+cc+udc+8453olLG8TtRr0d85Nc86tAW6LlnV3zs12zq1zzq1yzj3nnGuesG65X+rOuSOi7bVJSDvbOfdJtP85zrneUZ4jko5nv2h/a51zHzrnjk/a9tXOuU+dcxui45nhnGtY0ZuT3JpTMu+cu845t8w5tzJq4WxcyXs8HtgN6Ju07cbA2cCEIHp0jHPuDufcf6Lyf+6ce8g51yRhnQui9+Dnzrn3o3xvOecOSdp2O+fci1H51jrn5jvnTkxYfopz7r3ofVjunHvAOdcoYfkzzrnpSdssbY1yzu0Xvf/dkvL8LEpvG83v5Jy73zlXGJXjXedc34T8JZf3znbOTXfOrQVuSnEeOkT59k5IW+qc+yzpmAPn3E+i+dJLns65Z4CjgPPdjy3RiXWntXPulaiMnzjnzkkuQ8J+egKPA/UTtvVo2Szuhuh9/do591jiextl6B+dk/XOucXOuTHJebaUS3GZ1TnXyzm3IDrf77sfb0tIbumr9H2o6nxGea6LjmmDC1ulpzvntnfOXQDcAOyb8L5dW8lxVFiHEz4HPZ1z7wMbgR4uqZUyIV+P6PjXOedec861jN6D951zq51zs5xzLZP2f7wLr1Ssi+raY865XROWd4zW+8Y5t8Y5t7CyeiMxEwSBJk2xmAhbjP6SMN+A8JLiemCvhPQXgM+A44H9gLGEX54douVtgABYAvwS2AfYG2gBfAc8B3QEjgD+Bfw9Yds3AouSynVEtL020XxnYDNwC9AeOBVYFOU5IspzdDQ/HzgBaAc8BXwD7BLlOT0qzynAnkAn4FKgYSXv0evAo0nz3wD3Ah2ifX0D/LaK9/ovwIyktPOi93H3hLTrouNvA/QEPgIeS1h+AVAM/B/ws+h8/CXKVz/K04rwEttM4KfAvtF7dny0/JBoG2OiYzgpOnePJ+znGWB6UnkHA5sS5t8GHkzKMw74R/TaEV7y+1tU1n2AodExHxXlaRudty+Ac6J606aC93ApcH70uj2wJpr2jdIuApYk5H8DGBe93hmYQ3gZrkU0bZew/0+AM6L53wE/APtUUI4GwEhgU8K2miTs85vovW0PnEhY565LOodf8+Nn5ShgQeL7n2KfeVE5z0qx7AJgfcJ8zyhvi2h+D8LP9CNRfekJvJ+4vXTehzTPpwe+BU7mx8/YZcD2QMPofVmc8L41ruB4q6rDJZ+Dtwg/+/sC+Snei5J8rwHdgC7RMc6O0g4DDgU+Bp5NWK8XsBb4VfRedCs59oQ8HwJPR+/pPoSfo5Nq+3tcU2amrBdAk6Z0J8JgbhOwOpo2R399Qp6SL/mTktZ9D5gYvW4T5bkuKc/NhEFCg4S0g6O8R0bzN1J1MPcsCQFglDaU1MHc6Ql5WkRpJf8ALiMMerarxnv0OuWDuX8l5RkHvFnFdnz0/rZJSHsTmFzFev2ifyoumr8gOqaDUrxfJUHN7UAh0KiCbf4BmJOU9ouofAXRfDrB3CVAUcn5JfyHvRK4KJrvCawDdkrazlMlx51Qv65K41w8AzwXvb4YmEH4z35IlPY88FRC/tJgLtW5TNr/iIS07aL3/PxKylLmvUja53tJaY9S9gfMEuCCpDzHRu//ThXsrySYW8+Pn9eSaT2VB3N3EgYw9RLy9CZ1MFfh+5Dm+bwCWEgFnzFSfN4ryFdVHS75HByeIj05mAuAAxPSrorSDk5IuwJYlnQeb0na9j6J2yL8IfHLqo5FUzwnXWaVuJlH+Ou5E+Ev1JuAJ92Plyf3j/7OTlpvNnBAUtpbSfMHAHOD8L4xAIIgmE/4yz153crsD8xNSnuzgrzvJ+xrGeGv8t2jJCP8B/U/F14aHeCc26ka5Si3j8jShH1U5I/AV8D5AM65AwnvURyfmMk5d4Zz7u/RZazVhP8oGxJepi2xibAlJ3H/JJShM/BGEARrKyjLAZQ/n/9H2PKyf/nsFfoD0ISwFQbCAKERYVAF0JUwwPsyupS1OjqmswhbThMl151U/gYcE70+lvA+w9eAY51zjjCg/1s1yp8osd78QHiuqjqnVW4rUlo/okt5BcDvk96TPxO+/22r2PaV/Ph5LZl+W8U6+wNvBWXvoUvn85P8PqRzPp8nrAOfOeced8790jm3YxXlS6WqOgxh8PtOGtvaRNiKVmIZYVC2ICmtecJ8F+DXScf5r2hZybH+Dng8umx7g3OuUxplkZjIy3YBRKppXRAEifesve+c6wFcQ9jyURFH+IWYaE2KfMl5ktM3R9tKlKqjQEXbSbYxRVo9gCAIljrnOhAGBMcSXtK80zl3WBAEX6S5/VT7CKjiftkgCH5wzj0OnOecu5Gw48NiYFZJHufczwj/Gd4KXE54ue4I4DHCS3slipP+MZe8N/VSpFVYpKR5l5Re5XkJguBr59wrwEDCYHUgMDUIgm8SyvM1cHiK/Se/h6nqTrK/Ao9FgfDRhC1O9QlbXDsS/jPe0mCu2ud0C7dV8vcSygfUEF5urszypM8rzrmv0ijTln5+kste6fkMguBz51x7fvyM3QDcEX3GlqZYb2vK/EMUcFYl1edlcxAExUlpifW9HuGVhT+k2N4ygCAIbnTOPU14q8WxwDXOuduCILgxjTJJjlPLnNQFmwh/XQN8EP09MinPzxOWVeQD4HCX0DvROXcw4f1LJeuuAJo75+onrHdo0nY+pPw/kC0aDysIgg1BEEwPguA3hAFAI8J7cWrDBMJew2cQ3i/1aBAEif+wjiC81HN9EARvBUHwEbAl4+a9CxxRyQ31HxDep5XoSMJ/aAuj+RWE9y0lSj4vELYcnuTCTgcnAk8mLHuH8D6mvCAIFiVNn6d/OKEgCP5HGABfSvjD+b1oH9sDI4BPqtjuRsLgryZsBOpFLYLVUQh8CfwkxXuyKAiCDTVUvkQfAt2cc4n/n7bk85PW+QyCYH0QBK8GQXAF4WdsZ8JhYiD9c1BVHc60d4EDKjhHq0syBUHwSRAEDwZB8AvCqxoXZ6m8UsMUzEncNHDOtYimfZ1zwwg7OvwRwi8rwg4QD0W9uzo458YCBxJeZqjMA4SX4Z5wzh3owt6DTxNePvl7lOc1woDq5mj//QhvOk50D/Az59xNzrmfOOf6ELZcQfotDjjnznfOXeicO9g5txfQH9iJspdgMiZ6L/8CPBzt9/GkLP8FWriw1+g+zrlzCW/qr64HCAOcPzrnfuqc29uFvVdLLp3fBRzmwh6UHVw4ruBY4MmE1pO/AAc65y6OzstFhPfVJXsZ+J6wRXEVZVtzZxLepzbFOXdqVI7OzrkRzrnztuC4IGx5GwS8HgRBSevK7Citqla5xUCX6HjynXNbcyVlMWFLTm/n3G7pXkqMgvdrgMtc2LP6AOdce+fcac65h7eiPJV5kPBHwYPR+e5B2OoE1fj8kMb5jD5fFzjnDoo+YwOAxvz4I2Ex0Mo51y06BxX1JK+qDmfadcAvos9IJxf2uj4xunTcwDm3swt79R7jwt78hxJ+b9bKd4lknoI5iZufE7YUfAn8mzCQGk14A3KJCwj/ST9D2Fv0Z0DvIAj+U9mGg3C8p16E/0jeJvzHv4CEoCAIgv8CFxLed7OAsIfn1UnbeZcw8OoflfEqoGRIg+qM9r4KOJfwH9JCwp67Q4IgqM0x3h4BmgJ/DoLgy8QFQRD8iTDQupPwOH9BwqC36YoCsiMI35tXCVvibia6jBQEwT8JWyOPJTyfTwBTSAiigyCYTniJ7Nooz88JexMn7+sHwktRnQg7J2xKWBYQ3k83BbiPMFh9hbAF79PqHlfkr4StcomB299SpKXyO8L7NecT3gu2xU87CILgTcKA4zHCVsz7qrHu44RD0vQhbO16G7ieH+99rFFRq1lfwtbX+YQ/jqr9+UnzfH5DeF/obMLP2AjgvCAIXo+Wv0T4Q3E64Tko+VGWvK9K63CmBUHwF8IOH4cSdoaYD9xNeHzFhL188wl/kP03KmNJb36pA0p6nIlIBjnnBhJ+kTZLuEdLRNLgnCvpQLJ/EI4vKSIJ1AFCJAOcc78mvCS7krBX3Z3ACwrkRKoW3T7xT8IW+AMIW9b+oUBOJDUFcyKZcRDhJZldCXv8PUN4GVBEqrY34e0JzQkDupmEw5yISAq6zCoiIiISY+oAISIiIhJjCuZEREREYmxbD+aCuE+zZ88O+vTpExQUFATOueCJJ56oMO+QIUMC51wwZsyYMukbNmwIhg8fHuTn5weNGzcO+vTpEyxZsiTlNoqKikr3VVRUVJr++uuvB3379g1atmwZNGrUKDjooIOCiRMnZv390aRJkyZNmurYVM423wGisLAw20XYKv/73//Ya6+96N27NyNHjmTVqlUpj+nll19mzpw5tGjRgu+++65MntGjRzNz5kweeOAB9t57by677DKOP/54pk+fTv36ZQc/HzRoEB06dKCwsJBly5axcWP4NJ3p06fTpk0bzjvvPJo3b87rr7/OkCFDWLduHaeddlpm3wTJmvz8fIqKirJdDIkB1RWpDtWX1Fq1Sn7QTWhbb5mLvR49enDVVVfRu3dv6tVLfTqXLFnCDTfcwIMPPkheXtn4/bvvvmPSpElce+21HHnkkRxyyCGMHTuWhQsX8ve//71M3kcffZR169Zx0UXlB/kfMWIEV155JV27dmWvvfZi0KBBnHjiiUybNq3mDlZERETKUTBXx23atIlhw4YxYsQI2rVrV275v/71L3744QeOOuqo0rSCggLatWvHO++8U5q2YMECHnroIcaOHVth0Jhs9erV7Lzzzlt/ECIiIlIhBXN13JgxY2jatCmDBg1Kufyrr76ifv367LrrrmXS8/PzWbFiBQBr165l2LBh3HzzzbRs2TKt/c6aNYs33niD/v37b90BiIiISKW2+Xvm6rI333yTF154gZkzZ1Z73SAIcC58rOB1111H165dOfnkk9Na9+233+aSSy7hpptu4pBDDqn2vkVERBIFQcD69evZvHlz6f+muioIAurVq8cOO+yQ9rEqmKvD5syZw/Lly8sEVMXFxdx6661MmDCBd999l912243i4mJWrlxJs2bNSvN9/fXXdO8ePtf7jTfeoLCwkBdeeAEIKxpAp06dGDZsGKNHjy5d76233mLAgAH8+te/rrA1UEREpDrWr1/PdtttV+6+77pq06ZNrF+/noYNG6aVf9t4V7ZRgwYNKtea1r9/f/r27cs555wDwEEH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9908++yzfPvttxxyyCHceuuttG/fvtx2169fT+/evVm4cCHTpk3j4IMPzujx5aKsPtnBzOYRdmR4j3BYknqErWZXAqO894sIWwMfi1Z5DGgWpY8CRkfb+QAw4ENgOvArMyuuxUMRERERYNq0afzzn/8snWbMmIFzjlNOOQWAN998k0GDBjFlyhTMjLy8PM466yxWrfrxYt/dd9/NI488ws0338wrr7xCs2bNOPvss1m9enW5/d188820bNmy1o4vF7kgSHlr2bYiKCxMeTW21hVf2CfbRcg59SdMzXYRcpLqSmqqL7lNl822XWPHjmXcuHG89957NGzYsNzyNWvW0KFDBx577DF69epFEAR06dKFgQMHMnLkSADWrVvHwQcfzHXXXceAAQNK150xYwZ33HEH48eP5+ijj67zLXPRZdZy/QT0zFURERHJiCAImDRpEqeffnrKQA5g9erVbN68mV122QWAzz//nGXLlnHUUUeV5mnYsCGHHXYY77zzTmlaYWEhV111Fffffz877LBtP120wmDOez834fUNtVMcERERqStmz57N559/ztlnn11hnuuvv54DDjiAzp07A7BixQoAdttttzL5dtttN7766isAiouLGT58OEOGDOHAA1M+Qn6bUlnL3E+89yWh7uW1URgRERGpO5599lk6depUYcB144038vbbbzNhwgTq16/8wU1BEOBceIXx97//PXl5eVx00UU1XuY4qqw36xTgI+/9Z4RPaJidKpOZHZmJgomIiEh8FRUVMXPmTG699daUy2+44QamTp3KCy+8wF577VWa3rx5cwC++uorCgp+HP+/qKiodOy5f/zjH8ybN6/MegCnnHIKffr04YEHHqjpw8lpFQZzZnau9/4IoA3QlR97lIqIiIhUysxo0KABffv2Lbfs+uuvZ8qUKUyePJm2bduWWbbnnnvSokULZs+eTadOnYBw+JG33nqLa68NR0m75557WLv2xyeKLl++nHPOOYf777+frl27ZvCoclNVgwa/AbzhvW9gZk9WlldEREQEwkuizz33HH379mXHHXcss+zqq6/mxRdf5LHHHmPnnXcuvUeucePGNG7cGOccw4cP5/bbb6dt27bss88+jB07lsaNG3PaaacBYcCXqHHjxgC0adOmwoF167IqBw0GMLOJ3vtjgAGEzzxdCjxjZn/LZOFEREQk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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "per_borough = vnc_crime_cat[['Borough','Total']]\n",
    "\n",
    "per_borough.set_index('Borough',inplace = True)\n",
    "\n",
    "ax = per_borough.plot(kind='bar', figsize=(10, 6), rot=0)\n",
    "\n",
    "ax.set_ylabel('Number of Crimes')\n",
    "ax.set_xlabel('Borough')\n",
    "ax.set_title('Boroughs in Vancouver with the Highest crimes')\n",
    "\n",
    "for p in ax.patches:\n",
    "    ax.annotate(np.round(p.get_height(),decimals=2), \n",
    "                (p.get_x()+p.get_width()/2., p.get_height()), \n",
    "                ha='center', \n",
    "                va='center', \n",
    "                xytext=(0, 10), \n",
    "                textcoords='offset points',\n",
    "                fontsize = 14,\n",
    "               )\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create dataset with coordinates "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Neighbourhoods in West Side Borough 10\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array(['Shaughnessy', 'Fairview', 'Oakridge', 'Marpole', 'Kitsilano',\n",
       "       'Kerrisdale', 'West Point Grey', 'Arbutus Ridge', 'South Cambie',\n",
       "       'Dunbar-Southlands'], dtype=object)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_ws_neigh = vnc_boroughs_crime\n",
    "\n",
    "#vnc_ws_neigh.drop(['Type','Year', 'Month', 'Day', 'Hour'], axis = 1, inplace = True)\n",
    "vnc_ws_neigh = vnc_ws_neigh[vnc_ws_neigh['Borough'] == 'West Side']\n",
    "vnc_ws_neigh.reset_index(inplace=True, drop=True)\n",
    "\n",
    "print('Number of Neighbourhoods in West Side Borough', len(vnc_ws_neigh['Neighbourhood'].unique()))\n",
    "\n",
    "vnc_ws_neigh['Neighbourhood'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[49.2518626, 49.2641128, 49.2308288, 49.2092233, 49.2694099, 49.2346728, 49.2644843, 49.2409677, 49.2466847, 49.2534601] [-123.1380226, -123.1268352, -123.1311342, -123.1361495, -123.155267, -123.1553893, -123.1854326, -123.1670008, -123.120915, -123.1850439]\n"
     ]
    }
   ],
   "source": [
    "Latitude = []\n",
    "Longitude = []\n",
    "Borough = []\n",
    "Neighbourhood = vnc_ws_neigh['Neighbourhood'].unique()\n",
    "\n",
    "\n",
    "\n",
    "key = '830323b5ca694362904814ff0a11b803'\n",
    "geocoder = OpenCageGeocode(key)\n",
    "\n",
    "for i in range(len(Neighbourhood)):\n",
    "    address = '{}, Vancouver, BC, Canada'.format(Neighbourhood[i])\n",
    "    location = geocoder.geocode(address)\n",
    "    Latitude.append(location[0]['geometry']['lat'])\n",
    "    Longitude.append(location[0]['geometry']['lng'])\n",
    "    Borough.append('West Side')\n",
    "print(Latitude, Longitude)\n",
    "\n",
    "#print('The geograpical coordinate of Vancouver City are {}, {}.'.format(latitude, longitude))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Shaughnessy</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.251863</td>\n",
       "      <td>-123.138023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.264113</td>\n",
       "      <td>-123.126835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Oakridge</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.230829</td>\n",
       "      <td>-123.131134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Marpole</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.209223</td>\n",
       "      <td>-123.136150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Kitsilano</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.269410</td>\n",
       "      <td>-123.155267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Kerrisdale</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.234673</td>\n",
       "      <td>-123.155389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>West Point Grey</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.264484</td>\n",
       "      <td>-123.185433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Arbutus Ridge</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.240968</td>\n",
       "      <td>-123.167001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>South Cambie</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.246685</td>\n",
       "      <td>-123.120915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Dunbar-Southlands</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.253460</td>\n",
       "      <td>-123.185044</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Neighbourhood    Borough   Latitude   Longitude\n",
       "0        Shaughnessy  West Side  49.251863 -123.138023\n",
       "1           Fairview  West Side  49.264113 -123.126835\n",
       "2           Oakridge  West Side  49.230829 -123.131134\n",
       "3            Marpole  West Side  49.209223 -123.136150\n",
       "4          Kitsilano  West Side  49.269410 -123.155267\n",
       "5         Kerrisdale  West Side  49.234673 -123.155389\n",
       "6    West Point Grey  West Side  49.264484 -123.185433\n",
       "7      Arbutus Ridge  West Side  49.240968 -123.167001\n",
       "8       South Cambie  West Side  49.246685 -123.120915\n",
       "9  Dunbar-Southlands  West Side  49.253460 -123.185044"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ws_neig_dict = {'Neighbourhood': Neighbourhood,'Borough':Borough,'Latitude': Latitude,'Longitude':Longitude}\n",
    "ws_neig_geo = pd.DataFrame(data=ws_neig_dict, columns=['Neighbourhood', 'Borough', 'Latitude', 'Longitude'], index=None)\n",
    "\n",
    "ws_neig_geo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The geograpical coordinate of Vancouver, Canada are 49.2608724, -123.1139529.\n"
     ]
    }
   ],
   "source": [
    "address = 'Vancouver, BC, Canada'\n",
    "\n",
    "location = geocoder.geocode(address)\n",
    "latitude = location[0]['geometry']['lat']\n",
    "longitude = location[0]['geometry']['lng']\n",
    "\n",
    "print('The geograpical coordinate of Vancouver, Canada are {}, {}.'.format(latitude, longitude))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x1a1bd7be10>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "van_map = folium.Map(location=[latitude, longitude], zoom_start=12)\n",
    "\n",
    "# add markers to map\n",
    "for lat, lng, borough, neighborhood in zip(ws_neig_geo['Latitude'], ws_neig_geo['Longitude'], ws_neig_geo['Borough'], ws_neig_geo['Neighbourhood']):\n",
    "    label = '{}, {}'.format(neighborhood, borough)\n",
    "    label = folium.Popup(label, parse_html=True)\n",
    "    folium.CircleMarker(\n",
    "        [lat, lng],\n",
    "        radius=5,\n",
    "        popup=label,\n",
    "        color='red',\n",
    "        fill=True,\n",
    "        fill_color='#3186cc',\n",
    "        fill_opacity=0.7,\n",
    "        parse_html=False).add_to(van_map)  \n",
    "    \n",
    "van_map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your credentails:\n",
      "CLIENT_ID: XVY0YGK3DX5QGHMN2TGSK2EWA55P3JNPIVC5QVW5SGIGUI2L\n",
      "CLIENT_SECRET:T53Z3HT4W5DVALRIPBK2DPD4NFOCISMUTMNBLNW13KEJTAIJ\n"
     ]
    }
   ],
   "source": [
    "CLIENT_ID = 'XVY0YGK3DX5QGHMN2TGSK2EWA55P3JNPIVC5QVW5SGIGUI2L'\n",
    "CLIENT_SECRET = 'T53Z3HT4W5DVALRIPBK2DPD4NFOCISMUTMNBLNW13KEJTAIJ'\n",
    "VERSION = '20191101'\n",
    "LIMIT = 100\n",
    "\n",
    "print('Your credentails:')\n",
    "print('CLIENT_ID: ' + CLIENT_ID)\n",
    "print('CLIENT_SECRET:' + CLIENT_SECRET)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getNearbyVenues(names, latitudes, longitudes, radius=500):\n",
    "    \n",
    "    venues_list=[]\n",
    "    for name, lat, lng in zip(names, latitudes, longitudes):\n",
    "        print(name)\n",
    "            \n",
    "        # create the API request URL\n",
    "        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n",
    "            CLIENT_ID, \n",
    "            CLIENT_SECRET, \n",
    "            VERSION, \n",
    "            lat, \n",
    "            lng, \n",
    "            radius, \n",
    "            LIMIT)\n",
    "            \n",
    "        # make the GET request\n",
    "        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n",
    "        \n",
    "        # return only relevant information for each nearby venue\n",
    "        venues_list.append([(\n",
    "            name, \n",
    "            lat, \n",
    "            lng, \n",
    "            v['venue']['name'],  \n",
    "            v['venue']['categories'][0]['name']) for v in results])\n",
    "\n",
    "    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n",
    "    nearby_venues.columns = ['Neighbourhood', \n",
    "                  'Neighborhood Latitude', \n",
    "                  'Neighborhood Longitude', \n",
    "                  'Venue', \n",
    "                  'Venue Category']\n",
    "    \n",
    "    return(nearby_venues)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shaughnessy\n",
      "Fairview\n",
      "Oakridge\n",
      "Marpole\n",
      "Kitsilano\n",
      "Kerrisdale\n",
      "West Point Grey\n",
      "Arbutus Ridge\n",
      "South Cambie\n",
      "Dunbar-Southlands\n"
     ]
    }
   ],
   "source": [
    "vnc_ws_venues = getNearbyVenues(names=ws_neig_geo['Neighbourhood'],\n",
    "                                   latitudes=ws_neig_geo['Latitude'],\n",
    "                                   longitudes=ws_neig_geo['Longitude']\n",
    "                                  )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(222, 5)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Neighborhood Latitude</th>\n",
       "      <th>Neighborhood Longitude</th>\n",
       "      <th>Venue</th>\n",
       "      <th>Venue Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Shaughnessy</td>\n",
       "      <td>49.251863</td>\n",
       "      <td>-123.138023</td>\n",
       "      <td>Angus Park</td>\n",
       "      <td>Park</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Shaughnessy</td>\n",
       "      <td>49.251863</td>\n",
       "      <td>-123.138023</td>\n",
       "      <td>Crepe &amp; Cafe</td>\n",
       "      <td>French Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>49.264113</td>\n",
       "      <td>-123.126835</td>\n",
       "      <td>Gyu-Kaku Japanese BBQ</td>\n",
       "      <td>BBQ Joint</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>49.264113</td>\n",
       "      <td>-123.126835</td>\n",
       "      <td>CRESCENT nail and spa</td>\n",
       "      <td>Nail Salon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>49.264113</td>\n",
       "      <td>-123.126835</td>\n",
       "      <td>Charleson Park</td>\n",
       "      <td>Park</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Neighbourhood  Neighborhood Latitude  Neighborhood Longitude  \\\n",
       "0   Shaughnessy              49.251863             -123.138023   \n",
       "1   Shaughnessy              49.251863             -123.138023   \n",
       "2      Fairview              49.264113             -123.126835   \n",
       "3      Fairview              49.264113             -123.126835   \n",
       "4      Fairview              49.264113             -123.126835   \n",
       "\n",
       "                   Venue     Venue Category  \n",
       "0             Angus Park               Park  \n",
       "1           Crepe & Cafe  French Restaurant  \n",
       "2  Gyu-Kaku Japanese BBQ          BBQ Joint  \n",
       "3  CRESCENT nail and spa         Nail Salon  \n",
       "4         Charleson Park               Park  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(vnc_ws_venues.shape)\n",
    "vnc_ws_venues.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Venue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Arbutus Ridge</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Dunbar-Southlands</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Fairview</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Kerrisdale</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Kitsilano</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Marpole</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Oakridge</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Shaughnessy</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>South Cambie</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>West Point Grey</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Venue\n",
       "Neighbourhood           \n",
       "Arbutus Ridge          5\n",
       "Dunbar-Southlands      8\n",
       "Fairview              26\n",
       "Kerrisdale            38\n",
       "Kitsilano             46\n",
       "Marpole               30\n",
       "Oakridge               9\n",
       "Shaughnessy            2\n",
       "South Cambie          18\n",
       "West Point Grey       40"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_ws_venues.groupby('Neighbourhood').count().drop(['Neighborhood Latitude','Neighborhood Longitude','Venue Category'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 83 uniques categories.\n"
     ]
    }
   ],
   "source": [
    "print('There are {} uniques categories.'.format(len(vnc_ws_venues['Venue Category'].unique())))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>American Restaurant</th>\n",
       "      <th>Asian Restaurant</th>\n",
       "      <th>BBQ Joint</th>\n",
       "      <th>Bakery</th>\n",
       "      <th>Bank</th>\n",
       "      <th>Bar</th>\n",
       "      <th>Beach</th>\n",
       "      <th>Bookstore</th>\n",
       "      <th>Boutique</th>\n",
       "      <th>...</th>\n",
       "      <th>Szechuan Restaurant</th>\n",
       "      <th>Taiwanese Restaurant</th>\n",
       "      <th>Tea Room</th>\n",
       "      <th>Tennis Court</th>\n",
       "      <th>Thai Restaurant</th>\n",
       "      <th>Thrift / Vintage Store</th>\n",
       "      <th>Vegetarian / Vegan Restaurant</th>\n",
       "      <th>Vietnamese Restaurant</th>\n",
       "      <th>Women's Store</th>\n",
       "      <th>Yoga Studio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Shaughnessy</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Shaughnessy</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 84 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Neighbourhood  American Restaurant  Asian Restaurant  BBQ Joint  Bakery  \\\n",
       "0   Shaughnessy                    0                 0          0       0   \n",
       "1   Shaughnessy                    0                 0          0       0   \n",
       "2      Fairview                    0                 0          1       0   \n",
       "3      Fairview                    0                 0          0       0   \n",
       "4      Fairview                    0                 0          0       0   \n",
       "\n",
       "   Bank  Bar  Beach  Bookstore  Boutique  ...  Szechuan Restaurant  \\\n",
       "0     0    0      0          0         0  ...                    0   \n",
       "1     0    0      0          0         0  ...                    0   \n",
       "2     0    0      0          0         0  ...                    0   \n",
       "3     0    0      0          0         0  ...                    0   \n",
       "4     0    0      0          0         0  ...                    0   \n",
       "\n",
       "   Taiwanese Restaurant  Tea Room  Tennis Court  Thai Restaurant  \\\n",
       "0                     0         0             0                0   \n",
       "1                     0         0             0                0   \n",
       "2                     0         0             0                0   \n",
       "3                     0         0             0                0   \n",
       "4                     0         0             0                0   \n",
       "\n",
       "   Thrift / Vintage Store  Vegetarian / Vegan Restaurant  \\\n",
       "0                       0                              0   \n",
       "1                       0                              0   \n",
       "2                       0                              0   \n",
       "3                       0                              0   \n",
       "4                       0                              0   \n",
       "\n",
       "   Vietnamese Restaurant  Women's Store  Yoga Studio  \n",
       "0                      0              0            0  \n",
       "1                      0              0            0  \n",
       "2                      0              0            0  \n",
       "3                      0              0            0  \n",
       "4                      0              0            0  \n",
       "\n",
       "[5 rows x 84 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  One Hot Encoding to analyze each neighborhood \n",
    "# one hot encoding\n",
    "vnc_onehot = pd.get_dummies(vnc_ws_venues[['Venue Category']], prefix=\"\", prefix_sep=\"\")\n",
    "\n",
    "# add neighborhood column back to dataframe\n",
    "vnc_onehot['Neighbourhood'] = vnc_ws_venues['Neighbourhood'] \n",
    "\n",
    "# move neighborhood column to the first column\n",
    "fixed_columns = [vnc_onehot.columns[-1]] + list(vnc_onehot.columns[:-1])\n",
    "vnc_onehot = vnc_onehot[fixed_columns]\n",
    "\n",
    "vnc_onehot.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(222, 84)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_onehot.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>American Restaurant</th>\n",
       "      <th>Asian Restaurant</th>\n",
       "      <th>BBQ Joint</th>\n",
       "      <th>Bakery</th>\n",
       "      <th>Bank</th>\n",
       "      <th>Bar</th>\n",
       "      <th>Beach</th>\n",
       "      <th>Bookstore</th>\n",
       "      <th>Boutique</th>\n",
       "      <th>...</th>\n",
       "      <th>Szechuan Restaurant</th>\n",
       "      <th>Taiwanese Restaurant</th>\n",
       "      <th>Tea Room</th>\n",
       "      <th>Tennis Court</th>\n",
       "      <th>Thai Restaurant</th>\n",
       "      <th>Thrift / Vintage Store</th>\n",
       "      <th>Vegetarian / Vegan Restaurant</th>\n",
       "      <th>Vietnamese Restaurant</th>\n",
       "      <th>Women's Store</th>\n",
       "      <th>Yoga Studio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Arbutus Ridge</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Dunbar-Southlands</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>0.038462</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.038462</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.038462</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.038462</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Kerrisdale</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.026316</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.026316</td>\n",
       "      <td>0.052632</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.026316</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.052632</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.026316</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.026316</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Kitsilano</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.021739</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.065217</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.021739</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.021739</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.021739</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.021739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Marpole</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.033333</td>\n",
       "      <td>0.033333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.033333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.033333</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.033333</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Oakridge</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Shaughnessy</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>South Cambie</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.055556</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.055556</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>West Point Grey</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.025000</td>\n",
       "      <td>0.025000</td>\n",
       "      <td>0.025000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.025</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.025</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.025</td>\n",
       "      <td>0.025000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 84 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Neighbourhood  American Restaurant  Asian Restaurant  BBQ Joint  \\\n",
       "0      Arbutus Ridge             0.000000          0.000000   0.000000   \n",
       "1  Dunbar-Southlands             0.000000          0.000000   0.000000   \n",
       "2           Fairview             0.000000          0.076923   0.038462   \n",
       "3         Kerrisdale             0.000000          0.026316   0.000000   \n",
       "4          Kitsilano             0.043478          0.021739   0.000000   \n",
       "5            Marpole             0.000000          0.000000   0.000000   \n",
       "6           Oakridge             0.000000          0.000000   0.000000   \n",
       "7        Shaughnessy             0.000000          0.000000   0.000000   \n",
       "8       South Cambie             0.000000          0.000000   0.000000   \n",
       "9    West Point Grey             0.000000          0.000000   0.000000   \n",
       "\n",
       "     Bakery      Bank       Bar     Beach  Bookstore  Boutique  ...  \\\n",
       "0  0.200000  0.000000  0.000000  0.000000      0.000  0.000000  ...   \n",
       "1  0.000000  0.000000  0.000000  0.000000      0.000  0.000000  ...   \n",
       "2  0.000000  0.038462  0.000000  0.000000      0.000  0.000000  ...   \n",
       "3  0.026316  0.052632  0.000000  0.000000      0.000  0.026316  ...   \n",
       "4  0.065217  0.000000  0.000000  0.021739      0.000  0.000000  ...   \n",
       "5  0.000000  0.033333  0.033333  0.000000      0.000  0.000000  ...   \n",
       "6  0.000000  0.000000  0.000000  0.000000      0.000  0.000000  ...   \n",
       "7  0.000000  0.000000  0.000000  0.000000      0.000  0.000000  ...   \n",
       "8  0.000000  0.055556  0.000000  0.000000      0.000  0.000000  ...   \n",
       "9  0.025000  0.025000  0.025000  0.000000      0.025  0.000000  ...   \n",
       "\n",
       "   Szechuan Restaurant  Taiwanese Restaurant  Tea Room  Tennis Court  \\\n",
       "0             0.000000              0.000000  0.000000      0.000000   \n",
       "1             0.000000              0.000000  0.000000      0.000000   \n",
       "2             0.038462              0.000000  0.000000      0.000000   \n",
       "3             0.000000              0.000000  0.052632      0.000000   \n",
       "4             0.000000              0.000000  0.043478      0.021739   \n",
       "5             0.000000              0.033333  0.000000      0.000000   \n",
       "6             0.000000              0.000000  0.000000      0.000000   \n",
       "7             0.000000              0.000000  0.000000      0.000000   \n",
       "8             0.000000              0.000000  0.000000      0.000000   \n",
       "9             0.000000              0.000000  0.000000      0.000000   \n",
       "\n",
       "   Thai Restaurant  Thrift / Vintage Store  Vegetarian / Vegan Restaurant  \\\n",
       "0         0.000000                   0.000                       0.000000   \n",
       "1         0.000000                   0.000                       0.000000   \n",
       "2         0.000000                   0.000                       0.000000   \n",
       "3         0.026316                   0.000                       0.000000   \n",
       "4         0.043478                   0.000                       0.021739   \n",
       "5         0.033333                   0.000                       0.000000   \n",
       "6         0.000000                   0.000                       0.000000   \n",
       "7         0.000000                   0.000                       0.000000   \n",
       "8         0.000000                   0.000                       0.000000   \n",
       "9         0.000000                   0.025                       0.050000   \n",
       "\n",
       "   Vietnamese Restaurant  Women's Store  Yoga Studio  \n",
       "0               0.000000          0.000     0.000000  \n",
       "1               0.000000          0.000     0.000000  \n",
       "2               0.038462          0.000     0.000000  \n",
       "3               0.026316          0.000     0.000000  \n",
       "4               0.000000          0.000     0.021739  \n",
       "5               0.033333          0.000     0.000000  \n",
       "6               0.111111          0.000     0.000000  \n",
       "7               0.000000          0.000     0.000000  \n",
       "8               0.055556          0.000     0.000000  \n",
       "9               0.000000          0.025     0.025000  \n",
       "\n",
       "[10 rows x 84 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vnc_ws_grouped = vnc_onehot.groupby('Neighbourhood').mean().reset_index()\n",
    "vnc_ws_grouped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----Arbutus Ridge----\n",
      "            venue  freq\n",
      "0       Pet Store   0.2\n",
      "1          Bakery   0.2\n",
      "2  Nightlife Spot   0.2\n",
      "3   Grocery Store   0.2\n",
      "4             Spa   0.2\n",
      "\n",
      "\n",
      "----Dunbar-Southlands----\n",
      "                venue  freq\n",
      "0    Sushi Restaurant  0.12\n",
      "1  Salon / Barbershop  0.12\n",
      "2  Italian Restaurant  0.12\n",
      "3   Indian Restaurant  0.12\n",
      "4      Ice Cream Shop  0.12\n",
      "\n",
      "\n",
      "----Fairview----\n",
      "               venue  freq\n",
      "0        Coffee Shop  0.15\n",
      "1   Asian Restaurant  0.08\n",
      "2               Park  0.08\n",
      "3  Korean Restaurant  0.04\n",
      "4       Camera Store  0.04\n",
      "\n",
      "\n",
      "----Kerrisdale----\n",
      "                venue  freq\n",
      "0         Coffee Shop  0.11\n",
      "1  Chinese Restaurant  0.08\n",
      "2                Bank  0.05\n",
      "3      Sandwich Place  0.05\n",
      "4    Sushi Restaurant  0.05\n",
      "\n",
      "\n",
      "----Kitsilano----\n",
      "                 venue  freq\n",
      "0               Bakery  0.07\n",
      "1  American Restaurant  0.04\n",
      "2     Sushi Restaurant  0.04\n",
      "3       Ice Cream Shop  0.04\n",
      "4  Japanese Restaurant  0.04\n",
      "\n",
      "\n",
      "----Marpole----\n",
      "                venue  freq\n",
      "0    Sushi Restaurant  0.10\n",
      "1         Pizza Place  0.10\n",
      "2  Chinese Restaurant  0.07\n",
      "3            Bus Stop  0.07\n",
      "4                Café  0.03\n",
      "\n",
      "\n",
      "----Oakridge----\n",
      "               venue  freq\n",
      "0   Sushi Restaurant  0.11\n",
      "1    Bubble Tea Shop  0.11\n",
      "2  Convenience Store  0.11\n",
      "3     Sandwich Place  0.11\n",
      "4           Pharmacy  0.11\n",
      "\n",
      "\n",
      "----Shaughnessy----\n",
      "                   venue  freq\n",
      "0                   Park   0.5\n",
      "1      French Restaurant   0.5\n",
      "2  Performing Arts Venue   0.0\n",
      "3                    Pub   0.0\n",
      "4  Portuguese Restaurant   0.0\n",
      "\n",
      "\n",
      "----South Cambie----\n",
      "                   venue  freq\n",
      "0            Coffee Shop  0.28\n",
      "1               Bus Stop  0.11\n",
      "2                   Park  0.11\n",
      "3   Cantonese Restaurant  0.06\n",
      "4  Vietnamese Restaurant  0.06\n",
      "\n",
      "\n",
      "----West Point Grey----\n",
      "                           venue  freq\n",
      "0                    Coffee Shop  0.10\n",
      "1               Sushi Restaurant  0.08\n",
      "2            Japanese Restaurant  0.08\n",
      "3                           Café  0.08\n",
      "4  Vegetarian / Vegan Restaurant  0.05\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Top5 most common venues across neighborhoods\n",
    "num_top_venues = 5\n",
    "\n",
    "for hood in vnc_ws_grouped['Neighbourhood']:\n",
    "    print(\"----\"+hood+\"----\")\n",
    "    temp = vnc_ws_grouped[vnc_ws_grouped['Neighbourhood'] == hood].T.reset_index()\n",
    "    temp.columns = ['venue','freq']\n",
    "    temp = temp.iloc[1:]\n",
    "    temp['freq'] = temp['freq'].astype(float)\n",
    "    temp = temp.round({'freq': 2})\n",
    "    print(temp.sort_values('freq', ascending=False).reset_index(drop=True).head(num_top_venues))\n",
    "    print('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "      <th>6th Most Common Venue</th>\n",
       "      <th>7th Most Common Venue</th>\n",
       "      <th>8th Most Common Venue</th>\n",
       "      <th>9th Most Common Venue</th>\n",
       "      <th>10th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Arbutus Ridge</td>\n",
       "      <td>Spa</td>\n",
       "      <td>Bakery</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>Pet Store</td>\n",
       "      <td>Nightlife Spot</td>\n",
       "      <td>Yoga Studio</td>\n",
       "      <td>Dim Sum Restaurant</td>\n",
       "      <td>Diner</td>\n",
       "      <td>Falafel Restaurant</td>\n",
       "      <td>Fast Food Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Dunbar-Southlands</td>\n",
       "      <td>Italian Restaurant</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>Indian Restaurant</td>\n",
       "      <td>Pizza Place</td>\n",
       "      <td>Salon / Barbershop</td>\n",
       "      <td>Sporting Goods Shop</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Ice Cream Shop</td>\n",
       "      <td>Gift Shop</td>\n",
       "      <td>Falafel Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Asian Restaurant</td>\n",
       "      <td>Park</td>\n",
       "      <td>Korean Restaurant</td>\n",
       "      <td>Restaurant</td>\n",
       "      <td>Malay Restaurant</td>\n",
       "      <td>Salon / Barbershop</td>\n",
       "      <td>Sandwich Place</td>\n",
       "      <td>Nail Salon</td>\n",
       "      <td>Chinese Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Kerrisdale</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Chinese Restaurant</td>\n",
       "      <td>Tea Room</td>\n",
       "      <td>Pharmacy</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>Bank</td>\n",
       "      <td>Sandwich Place</td>\n",
       "      <td>Bakery</td>\n",
       "      <td>Thai Restaurant</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Kitsilano</td>\n",
       "      <td>Bakery</td>\n",
       "      <td>American Restaurant</td>\n",
       "      <td>French Restaurant</td>\n",
       "      <td>Thai Restaurant</td>\n",
       "      <td>Japanese Restaurant</td>\n",
       "      <td>Tea Room</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>Ice Cream Shop</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Food Truck</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Neighbourhood 1st Most Common Venue 2nd Most Common Venue  \\\n",
       "0      Arbutus Ridge                   Spa                Bakery   \n",
       "1  Dunbar-Southlands    Italian Restaurant      Sushi Restaurant   \n",
       "2           Fairview           Coffee Shop      Asian Restaurant   \n",
       "3         Kerrisdale           Coffee Shop    Chinese Restaurant   \n",
       "4          Kitsilano                Bakery   American Restaurant   \n",
       "\n",
       "  3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue  \\\n",
       "0         Grocery Store             Pet Store        Nightlife Spot   \n",
       "1     Indian Restaurant           Pizza Place    Salon / Barbershop   \n",
       "2                  Park     Korean Restaurant            Restaurant   \n",
       "3              Tea Room              Pharmacy      Sushi Restaurant   \n",
       "4     French Restaurant       Thai Restaurant   Japanese Restaurant   \n",
       "\n",
       "  6th Most Common Venue 7th Most Common Venue 8th Most Common Venue  \\\n",
       "0           Yoga Studio    Dim Sum Restaurant                 Diner   \n",
       "1   Sporting Goods Shop           Coffee Shop        Ice Cream Shop   \n",
       "2      Malay Restaurant    Salon / Barbershop        Sandwich Place   \n",
       "3                  Bank        Sandwich Place                Bakery   \n",
       "4              Tea Room      Sushi Restaurant        Ice Cream Shop   \n",
       "\n",
       "  9th Most Common Venue 10th Most Common Venue  \n",
       "0    Falafel Restaurant   Fast Food Restaurant  \n",
       "1             Gift Shop     Falafel Restaurant  \n",
       "2            Nail Salon     Chinese Restaurant  \n",
       "3       Thai Restaurant           Dessert Shop  \n",
       "4           Coffee Shop             Food Truck  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Top 10 \n",
    "def return_most_common_venues(row, num_top_venues):\n",
    "    row_categories = row.iloc[1:]\n",
    "    row_categories_sorted = row_categories.sort_values(ascending=False)\n",
    "    \n",
    "    return row_categories_sorted.index.values[0:num_top_venues]\n",
    "\n",
    "num_top_venues = 10\n",
    "\n",
    "indicators = ['st', 'nd', 'rd']\n",
    "\n",
    "# create columns according to number of top venues\n",
    "columns = ['Neighbourhood']\n",
    "for ind in np.arange(num_top_venues):\n",
    "    try:\n",
    "        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n",
    "    except:\n",
    "        columns.append('{}th Most Common Venue'.format(ind+1))\n",
    "\n",
    "# create a new dataframe\n",
    "neighborhoods_venues_sorted = pd.DataFrame(columns=columns)\n",
    "neighborhoods_venues_sorted['Neighbourhood'] = vnc_ws_grouped['Neighbourhood']\n",
    "\n",
    "for ind in np.arange(vnc_ws_grouped.shape[0]):\n",
    "    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(vnc_ws_grouped.iloc[ind, :], num_top_venues)\n",
    "\n",
    "neighborhoods_venues_sorted.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 4, 0, 0, 0, 0, 3, 2, 0, 0], dtype=int32)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cluster Neighbourhoods\n",
    "# set number of clusters\n",
    "kclusters = 5\n",
    "\n",
    "vnc_grouped_clustering = vnc_ws_grouped.drop('Neighbourhood', 1)\n",
    "\n",
    "# run k-means clustering\n",
    "kmeans = KMeans(n_clusters=kclusters, random_state=0).fit(vnc_grouped_clustering)\n",
    "\n",
    "# check cluster labels generated for each row in the dataframe\n",
    "kmeans.labels_[0:10] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Cluster Labels</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "      <th>6th Most Common Venue</th>\n",
       "      <th>7th Most Common Venue</th>\n",
       "      <th>8th Most Common Venue</th>\n",
       "      <th>9th Most Common Venue</th>\n",
       "      <th>10th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Shaughnessy</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.251863</td>\n",
       "      <td>-123.138023</td>\n",
       "      <td>2</td>\n",
       "      <td>French Restaurant</td>\n",
       "      <td>Park</td>\n",
       "      <td>Yoga Studio</td>\n",
       "      <td>Dessert Shop</td>\n",
       "      <td>Dim Sum Restaurant</td>\n",
       "      <td>Diner</td>\n",
       "      <td>Falafel Restaurant</td>\n",
       "      <td>Fast Food Restaurant</td>\n",
       "      <td>Food &amp; Drink Shop</td>\n",
       "      <td>Food Truck</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.264113</td>\n",
       "      <td>-123.126835</td>\n",
       "      <td>0</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Asian Restaurant</td>\n",
       "      <td>Park</td>\n",
       "      <td>Korean Restaurant</td>\n",
       "      <td>Restaurant</td>\n",
       "      <td>Malay Restaurant</td>\n",
       "      <td>Salon / Barbershop</td>\n",
       "      <td>Sandwich Place</td>\n",
       "      <td>Nail Salon</td>\n",
       "      <td>Chinese Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Oakridge</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.230829</td>\n",
       "      <td>-123.131134</td>\n",
       "      <td>3</td>\n",
       "      <td>Bubble Tea Shop</td>\n",
       "      <td>Vietnamese Restaurant</td>\n",
       "      <td>Pharmacy</td>\n",
       "      <td>Park</td>\n",
       "      <td>Sandwich Place</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>Sporting Goods Shop</td>\n",
       "      <td>Convenience Store</td>\n",
       "      <td>Fast Food Restaurant</td>\n",
       "      <td>Yoga Studio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Marpole</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.209223</td>\n",
       "      <td>-123.136150</td>\n",
       "      <td>0</td>\n",
       "      <td>Pizza Place</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>Bus Stop</td>\n",
       "      <td>Chinese Restaurant</td>\n",
       "      <td>Dim Sum Restaurant</td>\n",
       "      <td>Japanese Restaurant</td>\n",
       "      <td>Falafel Restaurant</td>\n",
       "      <td>Café</td>\n",
       "      <td>Liquor Store</td>\n",
       "      <td>Bubble Tea Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Kitsilano</td>\n",
       "      <td>West Side</td>\n",
       "      <td>49.269410</td>\n",
       "      <td>-123.155267</td>\n",
       "      <td>0</td>\n",
       "      <td>Bakery</td>\n",
       "      <td>American Restaurant</td>\n",
       "      <td>French Restaurant</td>\n",
       "      <td>Thai Restaurant</td>\n",
       "      <td>Japanese Restaurant</td>\n",
       "      <td>Tea Room</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>Ice Cream Shop</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Food Truck</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Neighbourhood    Borough   Latitude   Longitude  Cluster Labels  \\\n",
       "0   Shaughnessy  West Side  49.251863 -123.138023               2   \n",
       "1      Fairview  West Side  49.264113 -123.126835               0   \n",
       "2      Oakridge  West Side  49.230829 -123.131134               3   \n",
       "3       Marpole  West Side  49.209223 -123.136150               0   \n",
       "4     Kitsilano  West Side  49.269410 -123.155267               0   \n",
       "\n",
       "  1st Most Common Venue  2nd Most Common Venue 3rd Most Common Venue  \\\n",
       "0     French Restaurant                   Park           Yoga Studio   \n",
       "1           Coffee Shop       Asian Restaurant                  Park   \n",
       "2       Bubble Tea Shop  Vietnamese Restaurant              Pharmacy   \n",
       "3           Pizza Place       Sushi Restaurant              Bus Stop   \n",
       "4                Bakery    American Restaurant     French Restaurant   \n",
       "\n",
       "  4th Most Common Venue 5th Most Common Venue 6th Most Common Venue  \\\n",
       "0          Dessert Shop    Dim Sum Restaurant                 Diner   \n",
       "1     Korean Restaurant            Restaurant      Malay Restaurant   \n",
       "2                  Park        Sandwich Place      Sushi Restaurant   \n",
       "3    Chinese Restaurant    Dim Sum Restaurant   Japanese Restaurant   \n",
       "4       Thai Restaurant   Japanese Restaurant              Tea Room   \n",
       "\n",
       "  7th Most Common Venue 8th Most Common Venue 9th Most Common Venue  \\\n",
       "0    Falafel Restaurant  Fast Food Restaurant     Food & Drink Shop   \n",
       "1    Salon / Barbershop        Sandwich Place            Nail Salon   \n",
       "2   Sporting Goods Shop     Convenience Store  Fast Food Restaurant   \n",
       "3    Falafel Restaurant                  Café          Liquor Store   \n",
       "4      Sushi Restaurant        Ice Cream Shop           Coffee Shop   \n",
       "\n",
       "  10th Most Common Venue  \n",
       "0             Food Truck  \n",
       "1     Chinese Restaurant  \n",
       "2            Yoga Studio  \n",
       "3        Bubble Tea Shop  \n",
       "4             Food Truck  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add clustering labels\n",
    "neighborhoods_venues_sorted.insert(0, 'Cluster Labels', kmeans.labels_)\n",
    "\n",
    "vancouver_merged = ws_neig_geo\n",
    "\n",
    "# merge toronto_grouped with Vancouver data to add latitude/longitude for each neighborhood\n",
    "vancouver_merged = vancouver_merged.join(neighborhoods_venues_sorted.set_index('Neighbourhood'), on='Neighbourhood')\n",
    "\n",
    "vancouver_merged.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x1a1c4ef790>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create map\n",
    "map_clusters = folium.Map(location=[latitude, longitude], zoom_start=12)\n",
    "\n",
    "# set color scheme for the clusters\n",
    "x = np.arange(kclusters)\n",
    "ys = [i + x + (i*x)**2 for i in range(kclusters)]\n",
    "colors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\n",
    "rainbow = [colors.rgb2hex(i) for i in colors_array]\n",
    "\n",
    "# add markers to the map\n",
    "markers_colors = []\n",
    "for lat, lon, poi, cluster in zip(vancouver_merged['Latitude'], vancouver_merged['Longitude'], vancouver_merged['Neighbourhood'], vancouver_merged['Cluster Labels']):\n",
    "    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n",
    "    folium.CircleMarker(\n",
    "        [lat, lon],\n",
    "        radius=5,\n",
    "        popup=label,\n",
    "        color=rainbow[cluster-1],\n",
    "        fill=True,\n",
    "        fill_color=rainbow[cluster-1],\n",
    "        fill_opacity=0.7).add_to(map_clusters)\n",
    "       \n",
    "map_clusters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analysis "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "      <th>6th Most Common Venue</th>\n",
       "      <th>7th Most Common Venue</th>\n",
       "      <th>8th Most Common Venue</th>\n",
       "      <th>9th Most Common Venue</th>\n",
       "      <th>10th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>West Side</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Asian Restaurant</td>\n",
       "      <td>Park</td>\n",
       "      <td>Korean Restaurant</td>\n",
       "      <td>Restaurant</td>\n",
       "      <td>Malay Restaurant</td>\n",
       "      <td>Salon / Barbershop</td>\n",
       "      <td>Sandwich Place</td>\n",
       "      <td>Nail Salon</td>\n",
       "      <td>Chinese Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>West Side</td>\n",
       "      <td>Pizza Place</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>Bus Stop</td>\n",
       "      <td>Chinese Restaurant</td>\n",
       "      <td>Dim Sum Restaurant</td>\n",
       "      <td>Japanese Restaurant</td>\n",
       "      <td>Falafel Restaurant</td>\n",
       "      <td>Café</td>\n",
       "      <td>Liquor Store</td>\n",
       "      <td>Bubble Tea Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>West Side</td>\n",
       "      <td>Bakery</td>\n",
       "      <td>American Restaurant</td>\n",
       "      <td>French Restaurant</td>\n",
       "      <td>Thai Restaurant</td>\n",
       "      <td>Japanese Restaurant</td>\n",
       "      <td>Tea Room</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>Ice Cream Shop</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Food Truck</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>West Side</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Chinese Restaurant</td>\n",
       "      <td>Tea Room</td>\n",
       "      <td>Pharmacy</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>Bank</td>\n",
       "      <td>Sandwich Place</td>\n",
       "      <td>Bakery</td>\n",
       "      <td>Thai Restaurant</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>West Side</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Café</td>\n",
       "      <td>Japanese Restaurant</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Vegetarian / Vegan Restaurant</td>\n",
       "      <td>Dessert Shop</td>\n",
       "      <td>Pizza Place</td>\n",
       "      <td>Pharmacy</td>\n",
       "      <td>Park</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>West Side</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Bus Stop</td>\n",
       "      <td>Park</td>\n",
       "      <td>Vietnamese Restaurant</td>\n",
       "      <td>Light Rail Station</td>\n",
       "      <td>Bank</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>Gift Shop</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>Malay Restaurant</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Borough 1st Most Common Venue 2nd Most Common Venue  \\\n",
       "1  West Side           Coffee Shop      Asian Restaurant   \n",
       "3  West Side           Pizza Place      Sushi Restaurant   \n",
       "4  West Side                Bakery   American Restaurant   \n",
       "5  West Side           Coffee Shop    Chinese Restaurant   \n",
       "6  West Side           Coffee Shop                  Café   \n",
       "8  West Side           Coffee Shop              Bus Stop   \n",
       "\n",
       "  3rd Most Common Venue  4th Most Common Venue 5th Most Common Venue  \\\n",
       "1                  Park      Korean Restaurant            Restaurant   \n",
       "3              Bus Stop     Chinese Restaurant    Dim Sum Restaurant   \n",
       "4     French Restaurant        Thai Restaurant   Japanese Restaurant   \n",
       "5              Tea Room               Pharmacy      Sushi Restaurant   \n",
       "6   Japanese Restaurant       Sushi Restaurant                   Pub   \n",
       "8                  Park  Vietnamese Restaurant    Light Rail Station   \n",
       "\n",
       "           6th Most Common Venue 7th Most Common Venue 8th Most Common Venue  \\\n",
       "1               Malay Restaurant    Salon / Barbershop        Sandwich Place   \n",
       "3            Japanese Restaurant    Falafel Restaurant                  Café   \n",
       "4                       Tea Room      Sushi Restaurant        Ice Cream Shop   \n",
       "5                           Bank        Sandwich Place                Bakery   \n",
       "6  Vegetarian / Vegan Restaurant          Dessert Shop           Pizza Place   \n",
       "8                           Bank         Grocery Store             Gift Shop   \n",
       "\n",
       "  9th Most Common Venue 10th Most Common Venue  \n",
       "1            Nail Salon     Chinese Restaurant  \n",
       "3          Liquor Store        Bubble Tea Shop  \n",
       "4           Coffee Shop             Food Truck  \n",
       "5       Thai Restaurant           Dessert Shop  \n",
       "6              Pharmacy                   Park  \n",
       "8      Sushi Restaurant       Malay Restaurant  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vancouver_merged.loc[vancouver_merged['Cluster Labels'] == 0, vancouver_merged.columns[[1] + list(range(5, vancouver_merged.shape[1]))]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "      <th>6th Most Common Venue</th>\n",
       "      <th>7th Most Common Venue</th>\n",
       "      <th>8th Most Common Venue</th>\n",
       "      <th>9th Most Common Venue</th>\n",
       "      <th>10th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>West Side</td>\n",
       "      <td>Spa</td>\n",
       "      <td>Bakery</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>Pet Store</td>\n",
       "      <td>Nightlife Spot</td>\n",
       "      <td>Yoga Studio</td>\n",
       "      <td>Dim Sum Restaurant</td>\n",
       "      <td>Diner</td>\n",
       "      <td>Falafel Restaurant</td>\n",
       "      <td>Fast Food Restaurant</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Borough 1st Most Common Venue 2nd Most Common Venue  \\\n",
       "7  West Side                   Spa                Bakery   \n",
       "\n",
       "  3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue  \\\n",
       "7         Grocery Store             Pet Store        Nightlife Spot   \n",
       "\n",
       "  6th Most Common Venue 7th Most Common Venue 8th Most Common Venue  \\\n",
       "7           Yoga Studio    Dim Sum Restaurant                 Diner   \n",
       "\n",
       "  9th Most Common Venue 10th Most Common Venue  \n",
       "7    Falafel Restaurant   Fast Food Restaurant  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vancouver_merged.loc[vancouver_merged['Cluster Labels'] == 1, vancouver_merged.columns[[1] + list(range(5, vancouver_merged.shape[1]))]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "      <th>6th Most Common Venue</th>\n",
       "      <th>7th Most Common Venue</th>\n",
       "      <th>8th Most Common Venue</th>\n",
       "      <th>9th Most Common Venue</th>\n",
       "      <th>10th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>West Side</td>\n",
       "      <td>French Restaurant</td>\n",
       "      <td>Park</td>\n",
       "      <td>Yoga Studio</td>\n",
       "      <td>Dessert Shop</td>\n",
       "      <td>Dim Sum Restaurant</td>\n",
       "      <td>Diner</td>\n",
       "      <td>Falafel Restaurant</td>\n",
       "      <td>Fast Food Restaurant</td>\n",
       "      <td>Food &amp; Drink Shop</td>\n",
       "      <td>Food Truck</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Borough 1st Most Common Venue 2nd Most Common Venue  \\\n",
       "0  West Side     French Restaurant                  Park   \n",
       "\n",
       "  3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue  \\\n",
       "0           Yoga Studio          Dessert Shop    Dim Sum Restaurant   \n",
       "\n",
       "  6th Most Common Venue 7th Most Common Venue 8th Most Common Venue  \\\n",
       "0                 Diner    Falafel Restaurant  Fast Food Restaurant   \n",
       "\n",
       "  9th Most Common Venue 10th Most Common Venue  \n",
       "0     Food & Drink Shop             Food Truck  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vancouver_merged.loc[vancouver_merged['Cluster Labels'] == 2, vancouver_merged.columns[[1] + list(range(5, vancouver_merged.shape[1]))]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "      <th>6th Most Common Venue</th>\n",
       "      <th>7th Most Common Venue</th>\n",
       "      <th>8th Most Common Venue</th>\n",
       "      <th>9th Most Common Venue</th>\n",
       "      <th>10th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>West Side</td>\n",
       "      <td>Bubble Tea Shop</td>\n",
       "      <td>Vietnamese Restaurant</td>\n",
       "      <td>Pharmacy</td>\n",
       "      <td>Park</td>\n",
       "      <td>Sandwich Place</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>Sporting Goods Shop</td>\n",
       "      <td>Convenience Store</td>\n",
       "      <td>Fast Food Restaurant</td>\n",
       "      <td>Yoga Studio</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Borough 1st Most Common Venue  2nd Most Common Venue  \\\n",
       "2  West Side       Bubble Tea Shop  Vietnamese Restaurant   \n",
       "\n",
       "  3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue  \\\n",
       "2              Pharmacy                  Park        Sandwich Place   \n",
       "\n",
       "  6th Most Common Venue 7th Most Common Venue 8th Most Common Venue  \\\n",
       "2      Sushi Restaurant   Sporting Goods Shop     Convenience Store   \n",
       "\n",
       "  9th Most Common Venue 10th Most Common Venue  \n",
       "2  Fast Food Restaurant            Yoga Studio  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vancouver_merged.loc[vancouver_merged['Cluster Labels'] == 3, vancouver_merged.columns[[1] + list(range(5, vancouver_merged.shape[1]))]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "      <th>6th Most Common Venue</th>\n",
       "      <th>7th Most Common Venue</th>\n",
       "      <th>8th Most Common Venue</th>\n",
       "      <th>9th Most Common Venue</th>\n",
       "      <th>10th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>West Side</td>\n",
       "      <td>Italian Restaurant</td>\n",
       "      <td>Sushi Restaurant</td>\n",
       "      <td>Indian Restaurant</td>\n",
       "      <td>Pizza Place</td>\n",
       "      <td>Salon / Barbershop</td>\n",
       "      <td>Sporting Goods Shop</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Ice Cream Shop</td>\n",
       "      <td>Gift Shop</td>\n",
       "      <td>Falafel Restaurant</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Borough 1st Most Common Venue 2nd Most Common Venue  \\\n",
       "9  West Side    Italian Restaurant      Sushi Restaurant   \n",
       "\n",
       "  3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue  \\\n",
       "9     Indian Restaurant           Pizza Place    Salon / Barbershop   \n",
       "\n",
       "  6th Most Common Venue 7th Most Common Venue 8th Most Common Venue  \\\n",
       "9   Sporting Goods Shop           Coffee Shop        Ice Cream Shop   \n",
       "\n",
       "  9th Most Common Venue 10th Most Common Venue  \n",
       "9             Gift Shop     Falafel Restaurant  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vancouver_merged.loc[vancouver_merged['Cluster Labels'] == 4, vancouver_merged.columns[[1] + list(range(5, vancouver_merged.shape[1]))]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conslusions\n",
    "We have explored the crime data to understand different types of crimes in all neighborhoods of Vancouver and later categorized them into different boroughs, this helped us group the neighborhoods into boroughs and choose the safest borough first. Once we confirmed the borough the number of neighborhoods for consideration also comes down, we further shortlist the neighborhoods based on the common venues, to choose a neighborhood which best suits the business problem."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Discussions\n",
    "The objective of the business problem was to help stakeholders identify one of the safest borough in Vancouver, and an appropriate neighborhood within the borough to set up a commercial establishment especially a Grocery store. TAfter selecting the borough it was imperative to choose the right neighborhood where grocery shops were not among venues in a close proximity to each other. We achieved this by grouping the neighborhoods into clusters to assist the stakeholders by providing them with relavent data about venues and safety of a given neighborhood."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
